{
  "configurations" : [
    {
      "hdfs-logsearch-conf" : {
        "properties_attributes" : { },
        "properties" : {
          "component_mappings" : "NAMENODE:hdfs_namenode;DATANODE:hdfs_datanode;SECONDARY_NAMENODE:hdfs_secondarynamenode;JOURNALNODE:hdfs_journalnode;ZKFC:hdfs_zkfc;NFS_GATEWAY:hdfs_nfs3",
          "content" : "\n{\n  \"input\":[\n    {\n      \"type\":\"hdfs_datanode\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/hadoop-env/hdfs_log_dir_prefix', '/var/log/hadoop')}}/{{default('configurations/hadoop-env/hdfs_user', 'hdfs')}}/hadoop-{{default('configurations/hadoop-env/hdfs_user', 'hdfs')}}-datanode-*.log\"\n    },\n    {\n      \"type\":\"hdfs_namenode\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/hadoop-env/hdfs_log_dir_prefix', '/var/log/hadoop')}}/{{default('configurations/hadoop-env/hdfs_user', 'hdfs')}}/hadoop-{{default('configurations/hadoop-env/hdfs_user', 'hdfs')}}-namenode-*.log\"\n    },\n    {\n      \"type\":\"hdfs_journalnode\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/hadoop-env/hdfs_log_dir_prefix', '/var/log/hadoop')}}/{{default('configurations/hadoop-env/hdfs_user', 'hdfs')}}/hadoop-{{default('configurations/hadoop-env/hdfs_user', 'hdfs')}}-journalnode-*.log\"\n    },\n    {\n      \"type\":\"hdfs_secondarynamenode\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/hadoop-env/hdfs_log_dir_prefix', '/var/log/hadoop')}}/{{default('configurations/hadoop-env/hdfs_user', 'hdfs')}}/hadoop-{{default('configurations/hadoop-env/hdfs_user', 'hdfs')}}-secondarynamenode-*.log\"\n    },\n    {\n      \"type\":\"hdfs_zkfc\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/hadoop-env/hdfs_log_dir_prefix', '/var/log/hadoop')}}/{{default('configurations/hadoop-env/hdfs_user', 'hdfs')}}/hadoop-{{default('configurations/hadoop-env/hdfs_user', 'hdfs')}}-zkfc-*.log\"\n    },\n    {\n      \"type\":\"hdfs_nfs3\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/hadoop-env/hdfs_log_dir_prefix', '/var/log/hadoop')}}/{{default('configurations/hadoop-env/hdfs_user', 'hdfs')}}/hadoop-{{default('configurations/hadoop-env/hdfs_user', 'hdfs')}}-nfs3-*.log\"\n    },\n    {\n      \"type\":\"hdfs_audit\",\n      \"rowtype\":\"audit\",\n      \"is_enabled\":\"true\",\n      \"add_fields\":{\n        \"logType\":\"HDFSAudit\",\n        \"enforcer\":\"hadoop-acl\",\n        \"repoType\":\"1\",\n        \"repo\":\"hdfs\"\n      },\n      \"path\":\"{{default('/configurations/hadoop-env/hdfs_log_dir_prefix', '/var/log/hadoop')}}/{{default('configurations/hadoop-env/hdfs_user', 'hdfs')}}/hdfs-audit.log\"\n    }\n   ],\n  \"filter\":[\n    {\n      \"filter\":\"grok\",\n      \"conditions\":{\n        \"fields\":{\n          \"type\":[\n            \"hdfs_datanode\",\n            \"hdfs_journalnode\",\n            \"hdfs_secondarynamenode\",\n            \"hdfs_namenode\",\n            \"hdfs_zkfc\",\n            \"hdfs_nfs3\"\n          ]\n         }\n       },\n      \"log4j_format\":\"%d{ISO8601} %-5p %c{2} (%F:%M(%L)) - %m%n\",\n      \"multiline_pattern\":\"^(%{TIMESTAMP_ISO8601:logtime})\",\n      \"message_pattern\":\"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}%{LOGLEVEL:level}%{SPACE}%{JAVACLASS:logger_name}%{SPACE}\\\\(%{JAVAFILE:file}:%{JAVAMETHOD:method}\\\\(%{INT:line_number}\\\\)\\\\)%{SPACE}-%{SPACE}%{GREEDYDATA:log_message}\",\n      \"post_map_values\":{\n        \"logtime\":{\n          \"map_date\":{\n            \"target_date_pattern\":\"yyyy-MM-dd HH:mm:ss,SSS\"\n          }\n        }\n       }\n     },\n    {\n      \"filter\":\"grok\",\n      \"conditions\":{\n        \"fields\":{\n          \"type\":[\n            \"hdfs_audit\"\n          ]\n         }\n       },\n      \"log4j_format\":\"%d{ISO8601} %-5p %c{2} (%F:%M(%L)) - %m%n\",\n      \"multiline_pattern\":\"^(%{TIMESTAMP_ISO8601:evtTime})\",\n      \"message_pattern\":\"(?m)^%{TIMESTAMP_ISO8601:evtTime}%{SPACE}%{LOGLEVEL:level}%{SPACE}%{JAVACLASS:logger_name}:%{SPACE}%{GREEDYDATA:log_message}\",\n      \"post_map_values\":{\n        \"evtTime\":{\n          \"map_date\":{\n            \"target_date_pattern\":\"yyyy-MM-dd HH:mm:ss,SSS\"\n          }\n         }\n       }\n     },\n    {\n      \"filter\":\"keyvalue\",\n      \"sort_order\":1,\n      \"conditions\":{\n        \"fields\":{\n          \"type\":[\n            \"hdfs_audit\"\n          ]\n         }\n       },\n      \"source_field\":\"log_message\",\n      \"value_split\":\"=\",\n      \"field_split\":\"\\t\",\n      \"post_map_values\":{\n        \"src\":{\n          \"map_fieldname\":{\n            \"new_fieldname\":\"resource\"\n          }\n         },\n        \"ip\":{\n          \"map_fieldname\":{\n            \"new_fieldname\":\"cliIP\"\n          }\n         },\n        \"allowed\":[\n          {\n            \"map_fieldvalue\":{\n              \"pre_value\":\"true\",\n              \"post_value\":\"1\"\n            }\n           },\n          {\n            \"map_fieldvalue\":{\n              \"pre_value\":\"false\",\n              \"post_value\":\"0\"\n            }\n           },\n          {\n            \"map_fieldname\":{\n              \"new_fieldname\":\"result\"\n            }\n           }\n         ],\n        \"cmd\":{\n          \"map_fieldname\":{\n            \"new_fieldname\":\"action\"\n          }\n         },\n        \"proto\":{\n          \"map_fieldname\":{\n            \"new_fieldname\":\"cliType\"\n          }\n         },\n        \"callerContext\":{\n          \"map_fieldname\":{\n            \"new_fieldname\":\"req_caller_id\"\n          }\n         }\n       }\n     },\n    {\n      \"filter\":\"grok\",\n      \"sort_order\":2,\n      \"source_field\":\"ugi\",\n      \"remove_source_field\":\"false\",\n      \"conditions\":{\n        \"fields\":{\n          \"type\":[\n            \"hdfs_audit\"\n          ]\n         }\n       },\n      \"message_pattern\":\"%{USERNAME:p_user}.+auth:%{USERNAME:p_authType}.+via %{USERNAME:k_user}.+auth:%{USERNAME:k_authType}|%{USERNAME:user}.+auth:%{USERNAME:authType}|%{USERNAME:x_user}\",\n      \"post_map_values\":{\n        \"user\":{\n          \"map_fieldname\":{\n            \"new_fieldname\":\"reqUser\"\n          }\n         },\n        \"x_user\":{\n          \"map_fieldname\":{\n            \"new_fieldname\":\"reqUser\"\n          }\n         },\n        \"p_user\":{\n          \"map_fieldname\":{\n            \"new_fieldname\":\"reqUser\"\n          }\n         },\n        \"k_user\":{\n          \"map_fieldname\":{\n            \"new_fieldname\":\"proxyUsers\"\n          }\n         },\n        \"p_authType\":{\n          \"map_fieldname\":{\n            \"new_fieldname\":\"authType\"\n          }\n         },\n        \"k_authType\":{\n          \"map_fieldname\":{\n            \"new_fieldname\":\"proxyAuthType\"\n          }\n         }\n       }\n     }\n   ]\n }",
          "service_name" : "HDFS"
        }
      }
    },
    {
      "zoo.cfg" : {
        "properties_attributes" : { },
        "properties" : {
          "autopurge.purgeInterval" : "24",
          "dataDir" : "/srv/nbs/0/hadoop/zookeeper",
          "autopurge.snapRetainCount" : "30",
          "clientPort" : "2181",
          "initLimit" : "10",
          "tickTime" : "2000",
          "syncLimit" : "5",
          "maxClientCnxns" : "500"
        }
      }
    },
    {
      "ams-hbase-site" : {
        "properties_attributes" : { },
        "properties" : {
          "phoenix.coprocessor.maxMetaDataCacheSize" : "20480000",
          "hfile.block.cache.size" : "0.3",
          "phoenix.query.spoolThresholdBytes" : "20971520",
          "hbase.zookeeper.leaderport" : "61388",
          "max_open_files_limit" : "32768",
          "hbase.regionserver.thread.compaction.large" : "2",
          "phoenix.sequence.saltBuckets" : "2",
          "inherit.config.list.from.hbase" : "hbase.rootdir,hbase.cluster.distributed,hbase.master.port,hbase.master.port,\n      hbase.bulkload.staging.dir,hbase.master.info.bindAddress,hbase.master.info.port,\n      hbase.security.authorization,hbase.master.keytab.file,hbase.master.kerberos.principal,\n      hbase.regionserver.keytab.file,hbase.regionserver.kerberos.principal,\n      phoenix.queryserver.keytab.file,phoenix.queryserver.kerberos.principal,\n      hbase.security.authentication.spnego.kerberos.keytab,hbase.security.authentication.spnego.kerberos.principal,\n      hbase.regionserver.port,hbase.regionserver.info.port,hbase.zookeeper.quorum,zookeeper.znode.parent,dfs.domain.socket.path",
          "hbase.hstore.blockingStoreFiles" : "200",
          "zookeeper.session.timeout.localHBaseCluster" : "120000",
          "zookeeper.session.timeout" : "120000",
          "phoenix.coprocessor.maxServerCacheTimeToLiveMs" : "60000",
          "hbase.regionserver.global.memstore.lowerLimit" : "0.3",
          "dfs.client.read.shortcircuit" : "true",
          "phoenix.query.keepAliveMs" : "300000",
          "phoenix.query.maxGlobalMemoryPercentage" : "15",
          "hbase.grant.ams.permission.enabled" : "true",
          "hbase.local.dir" : "{{hbase_tmp_dir}}/local",
          "phoenix.query.timeoutMs" : "300000",
          "hbase.regionserver.thread.compaction.small" : "3",
          "hbase.hregion.memstore.flush.size" : "134217728",
          "hbase.hregion.max.filesize" : "4294967296",
          "hbase.client.scanner.timeout.period" : "300000",
          "phoenix.groupby.maxCacheSize" : "307200000",
          "hbase.master.wait.on.regionservers.mintostart" : "1",
          "hbase.regionserver.global.memstore.upperLimit" : "0.35",
          "hbase.normalizer.period" : "600000",
          "hbase.tmp.dir" : "/tmp/ams-hbase",
          "phoenix.query.rowKeyOrderSaltedTable" : "true",
          "phoenix.mutate.batchSize" : "10000",
          "hbase.rootdir" : "hdfs://host_group_3:8020/user/ams/hbase",
          "hbase.client.scanner.caching" : "100",
          "hbase.cluster.distributed" : "true",
          "hbase.hregion.majorcompaction" : "604800000",
          "hbase.replication" : "false",
          "hbase.rpc.timeout" : "300000",
          "hbase.zookeeper.peerport" : "61288",
          "hbase.zookeeper.property.clientPort" : "{{zookeeper_clientPort}}",
          "hbase.hstore.flusher.count" : "2",
          "hbase.hregion.memstore.block.multiplier" : "4",
          "hbase.master.normalizer.class" : "org.apache.hadoop.hbase.master.normalizer.SimpleRegionNormalizer",
          "hbase.snapshot.enabled" : "false",
          "phoenix.spool.directory" : "{{hbase_tmp_dir}}/phoenix-spool",
          "hbase.normalizer.enabled" : "false"
        }
      }
    },
    {
      "zookeeper-log4j" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "\n#\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n#\n#\n\n#\n# ZooKeeper Logging Configuration\n#\n\n# DEFAULT: console appender only\nlog4j.rootLogger=INFO, CONSOLE\n\n# Example with rolling log file\n#log4j.rootLogger=DEBUG, CONSOLE, ROLLINGFILE\n\n# Example with rolling log file and tracing\n#log4j.rootLogger=TRACE, CONSOLE, ROLLINGFILE, TRACEFILE\n\n#\n# Log INFO level and above messages to the console\n#\nlog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\nlog4j.appender.CONSOLE.Threshold=INFO\nlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L] - %m%n\n\n#\n# Add ROLLINGFILE to rootLogger to get log file output\n#    Log DEBUG level and above messages to a log file\nlog4j.appender.ROLLINGFILE=org.apache.log4j.RollingFileAppender\nlog4j.appender.ROLLINGFILE.Threshold=DEBUG\nlog4j.appender.ROLLINGFILE.File=zookeeper.log\n\n# Max log file size of 10MB\nlog4j.appender.ROLLINGFILE.MaxFileSize=10MB\n# uncomment the next line to limit number of backup files\n#log4j.appender.ROLLINGFILE.MaxBackupIndex=10\n\nlog4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.ROLLINGFILE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L] - %m%n\n\n\n#\n# Add TRACEFILE to rootLogger to get log file output\n#    Log DEBUG level and above messages to a log file\nlog4j.appender.TRACEFILE=org.apache.log4j.FileAppender\nlog4j.appender.TRACEFILE.Threshold=TRACE\nlog4j.appender.TRACEFILE.File=zookeeper_trace.log\n\nlog4j.appender.TRACEFILE.layout=org.apache.log4j.PatternLayout\n### Notice we are including log4j's NDC here (%x)\nlog4j.appender.TRACEFILE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L][%x] - %m%n"
        }
      }
    },
    {
      "hbase-log4j" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n# Define some default values that can be overridden by system properties\nhbase.root.logger=INFO,console\nhbase.security.logger=INFO,console\nhbase.log.dir=.\nhbase.log.file=hbase.log\n\n# Define the root logger to the system property \"hbase.root.logger\".\nlog4j.rootLogger=${hbase.root.logger}\n\n# Logging Threshold\nlog4j.threshold=ALL\n\n#\n# Daily Rolling File Appender\n#\nlog4j.appender.DRFA=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFA.File=${hbase.log.dir}/${hbase.log.file}\n\n# Rollver at midnight\nlog4j.appender.DRFA.DatePattern=.yyyy-MM-dd\n\n# 30-day backup\n#log4j.appender.DRFA.MaxBackupIndex=30\nlog4j.appender.DRFA.layout=org.apache.log4j.PatternLayout\n\n# Pattern format: Date LogLevel LoggerName LogMessage\nlog4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2}: %m%n\n\n# Rolling File Appender properties\nhbase.log.maxfilesize=256MB\nhbase.log.maxbackupindex=20\n\n# Rolling File Appender\nlog4j.appender.RFA=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFA.File=${hbase.log.dir}/${hbase.log.file}\n\nlog4j.appender.RFA.MaxFileSize=${hbase.log.maxfilesize}\nlog4j.appender.RFA.MaxBackupIndex=${hbase.log.maxbackupindex}\n\nlog4j.appender.RFA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFA.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2}: %m%n\n\n#\n# Security audit appender\n#\nhbase.security.log.file=SecurityAuth.audit\nhbase.security.log.maxfilesize=256MB\nhbase.security.log.maxbackupindex=20\nlog4j.appender.RFAS=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFAS.File=${hbase.log.dir}/${hbase.security.log.file}\nlog4j.appender.RFAS.MaxFileSize=${hbase.security.log.maxfilesize}\nlog4j.appender.RFAS.MaxBackupIndex=${hbase.security.log.maxbackupindex}\nlog4j.appender.RFAS.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\nlog4j.category.SecurityLogger=${hbase.security.logger}\nlog4j.additivity.SecurityLogger=false\n#log4j.logger.SecurityLogger.org.apache.hadoop.hbase.security.access.AccessController=TRACE\n\n#\n# Null Appender\n#\nlog4j.appender.NullAppender=org.apache.log4j.varia.NullAppender\n\n#\n# console\n# Add \"console\" to rootlogger above if you want to use this\n#\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\nlog4j.appender.console.target=System.err\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2}: %m%n\n\n# Custom Logging levels\n\nlog4j.logger.org.apache.zookeeper=INFO\n#log4j.logger.org.apache.hadoop.fs.FSNamesystem=DEBUG\nlog4j.logger.org.apache.hadoop.hbase=INFO\n# Make these two classes INFO-level. Make them DEBUG to see more zk debug.\nlog4j.logger.org.apache.hadoop.hbase.zookeeper.ZKUtil=INFO\nlog4j.logger.org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher=INFO\n#log4j.logger.org.apache.hadoop.dfs=DEBUG\n# Set this class to log INFO only otherwise its OTT\n# Enable this to get detailed connection error/retry logging.\n# log4j.logger.org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation=TRACE\n\n\n# Uncomment this line to enable tracing on _every_ RPC call (this can be a lot of output)\n#log4j.logger.org.apache.hadoop.ipc.HBaseServer.trace=DEBUG\n\n# Uncomment the below if you want to remove logging of client region caching'\n# and scan of .META. messages\n# log4j.logger.org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation=INFO\n# log4j.logger.org.apache.hadoop.hbase.client.MetaScanner=INFO"
        }
      }
    },
    {
      "kafka_jaas_conf" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "\nKafkaServer {\ncom.sun.security.auth.module.Krb5LoginModule required\nuseKeyTab=true\nkeyTab=\"{{kafka_keytab_path}}\"\nstoreKey=true\nuseTicketCache=false\nserviceName=\"{{kafka_bare_jaas_principal}}\"\nprincipal=\"{{kafka_jaas_principal}}\";\n};\nKafkaClient {\ncom.sun.security.auth.module.Krb5LoginModule required\nuseTicketCache=true\nrenewTicket=true\nserviceName=\"{{kafka_bare_jaas_principal}}\";\n};\nClient {\ncom.sun.security.auth.module.Krb5LoginModule required\nuseKeyTab=true\nkeyTab=\"{{kafka_keytab_path}}\"\nstoreKey=true\nuseTicketCache=false\nserviceName=\"zookeeper\"\nprincipal=\"{{kafka_jaas_principal}}\";\n};"
        }
      }
    },
    {
      "ranger-hdfs-policymgr-ssl" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "ranger-hbase-security" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "ams-logsearch-conf" : {
        "properties_attributes" : { },
        "properties" : {
          "component_mappings" : "\n      METRICS_COLLECTOR:ams_collector,ams_hbase_master,ams_hbase_regionserver;METRICS_MONITOR:ams_monitor;METRICS_GRAFANA:ams_grafana",
          "content" : "\n{\n  \"input\":[\n    {\n      \"type\":\"ams_hbase_master\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/ams-env/metrics_collector_log_dir', '/var/log/ambari-metrics-collector')}}/hbase-ams-master-*.log\"\n    },\n    {\n      \"type\":\"ams_hbase_regionserver\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/ams-env/metrics_collector_log_dir', '/var/log/ambari-metrics-collector')}}/hbase-ams-regionserver-*.log\"\n    },\n    {\n      \"type\":\"ams_collector\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/ams-env/metrics_collector_log_dir', '/var/log/ambari-metrics-collector')}}/ambari-metrics-collector.log\"\n    },\n    {\n      \"type\":\"ams_monitor\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/ams-env/metrics_monitor_log_dir', '/var/log/ambari-metrics-monitor')}}/ambari-metrics-monitor.out\"\n    },\n    {\n      \"type\":\"ams_grafana\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/ams-grafana-env/metrics_grafana_log_dir', '/var/log/ambari-metrics-grafana')}}/grafana.log\"\n    }\n  ],\n  \"filter\":[\n    {\n      \"filter\":\"grok\",\n      \"conditions\":{\n        \"fields\":{\n          \"type\":[\n            \"ams_collector\"\n          ]\n         }\n       },\n      \"log4j_format\":\"%d{ISO8601} %p %c: %m%n\",\n      \"multiline_pattern\":\"^(%{TIMESTAMP_ISO8601:logtime})\",\n      \"message_pattern\":\"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}%{LOGLEVEL:level}%{SPACE}%{JAVACLASS:logger_name}:%{SPACE}%{GREEDYDATA:log_message}\",\n      \"post_map_values\":{\n        \"logtime\":{\n          \"map_date\":{\n            \"target_date_pattern\":\"yyyy-MM-dd HH:mm:ss,SSS\"\n          }\n         }\n       }\n     },\n    {\n      \"filter\":\"grok\",\n      \"conditions\":{\n        \"fields\":{\n          \"type\":[\n            \"ams_hbase_master\",\n            \"ams_hbase_regionserver\"\n          ]\n         }\n       },\n      \"log4j_format\":\"%d{ISO8601} %-5p [%t] %c{2}: %m%n\",\n      \"multiline_pattern\":\"^(%{TIMESTAMP_ISO8601:logtime})\",\n      \"message_pattern\":\"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}%{LOGLEVEL:level}%{SPACE}\\\\[%{DATA:thread_name}\\\\]%{SPACE}%{JAVACLASS:logger_name}:%{SPACE}%{GREEDYDATA:log_message}\",\n      \"post_map_values\":{\n        \"logtime\":{\n          \"map_date\":{\n            \"target_date_pattern\":\"yyyy-MM-dd HH:mm:ss,SSS\"\n          }\n         }\n       }\n     },\n    {\n      \"filter\":\"grok\",\n      \"conditions\":{\n        \"fields\":{\n          \"type\":[\n            \"ams_grafana\"\n          ]\n         }\n       },\n      \"log4j_format\":\"%d{ISO8601} %-5p [%t] %c{2}: %m%n\",\n      \"multiline_pattern\":\"^(%{DATESTAMP:logtime})\",\n      \"message_pattern\":\"(?m)^%{DATESTAMP:logtime}%{SPACE}\\\\[%{WORD:level}\\\\]%{SPACE}%{GREEDYDATA:log_message}\",\n      \"post_map_values\":{\n        \"logtime\":{\n          \"map_date\":{\n            \"target_date_pattern\":\"yyyy/MM/dd HH:mm:ss\"\n          }\n         },\n        \"level\":[\n          {\n            \"map_fieldvalue\":{\n              \"pre_value\":\"I\",\n              \"post_value\":\"INFO\"\n            }\n          },\n          {\n            \"map_fieldvalue\":{\n              \"pre_value\":\"W\",\n              \"post_value\":\"WARN\"\n            }\n          },\n          {\n            \"map_fieldvalue\":{\n              \"pre_value\":\"D\",\n              \"post_value\":\"DEBUG\"\n             }\n           },\n           {\n             \"map_fieldvalue\":{\n               \"pre_value\":\"E\",\n               \"post_value\":\"ERROR\"\n             }\n           },\n           {\n             \"map_fieldvalue\":{\n               \"pre_value\":\"F\",\n               \"post_value\":\"FATAL\"\n             }\n           }\n         ]\n       }\n     },\n    {\n      \"filter\":\"grok\",\n      \"conditions\":{\n        \"fields\":{\n          \"type\":[\n            \"ams_monitor\"\n          ]\n        }\n      },\n      \"log4j_format\":\"\",\n      \"multiline_pattern\":\"^(%{TIMESTAMP_ISO8601:logtime})\",\n      \"message_pattern\":\"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}\\\\[%{LOGLEVEL:level}\\\\]%{SPACE}%{JAVAFILE:file}:%{INT:line_number}%{SPACE}-%{SPACE}%{GREEDYDATA:log_message}\",\n      \"post_map_values\":{\n        \"logtime\":{\n          \"map_date\":{\n            \"target_date_pattern\":\"yyyy-MM-dd HH:mm:ss,SSS\"\n          }\n         }\n       },\n      \"level\":[\n        {\n          \"map_fieldvalue\":{\n            \"pre_value\":\"WARNING\",\n            \"post_value\":\"WARN\"\n          }\n        }\n      ]\n     }\n   ]\n }",
          "service_name" : "AMS"
        }
      }
    },
    {
      "hbase-site" : {
        "properties_attributes" : { },
        "properties" : {
          "hbase.coprocessor.master.classes" : "",
          "hfile.block.cache.size" : "0.4",
          "hbase.master.port" : "16000",
          "hbase.hstore.blockingStoreFiles" : "10",
          "hbase.zookeeper.useMulti" : "true",
          "dfs.domain.socket.path" : "/var/lib/hadoop-hdfs/dn_socket",
          "zookeeper.session.timeout" : "90000",
          "hbase.master.info.bindAddress" : "0.0.0.0",
          ">hbase.regionserver.executor.openregion.threads" : "100",
          "hbase.master.ui.readonly" : "false",
          "hbase.local.dir" : "${hbase.tmp.dir}/local",
          "phoenix.query.timeoutMs" : "60000",
          "hbase.hregion.majorcompaction.jitter" : "0.50",
          "hbase.hregion.memstore.flush.size" : "134217728",
          "hbase.regionserver.wal.codec" : "org.apache.hadoop.hbase.regionserver.wal.WALCellCodec",
          "hbase.client.retries.number" : "35",
          "hbase.hregion.max.filesize" : "10737418240",
          "zookeeper.recovery.retry" : "6",
          "hbase.hstore.compaction.max" : "10",
          "hbase.regionserver.global.memstore.size" : "0.4",
          "hbase.zookeeper.quorum" : "%HOSTGROUP::host_group_1%,%HOSTGROUP::host_group_2%,%HOSTGROUP::host_group_3%",
          "hbase.regionserver.info.port" : "16030",
          "hbase.client.keyvalue.maxsize" : "1048576",
          "hbase.tmp.dir" : "/usr/ndp/data/hbase/tmp/hbase-${user.name}",
          "hbase.rpc.protection" : "authentication",
          "zookeeper.znode.parent" : "/hbase-unsecure",
          "hbase.master.info.port" : "16010",
          "hbase.rootdir" : "hdfs://%HOSTGROUP::host_group_3%:8020/apps/hbase/data",
          "hbase.client.scanner.caching" : "100",
          "hbase.cluster.distributed" : "true",
          "hbase.hregion.majorcompaction" : "604800000",
          "hbase.hstore.compactionThreshold" : "3",
          "hbase.hregion.memstore.mslab.enabled" : "true",
          "hbase.rpc.timeout" : "90000",
          "hbase.superuser" : "hbase",
          "hbase.coprocessor.region.classes" : "org.apache.hadoop.hbase.security.access.SecureBulkLoadEndpoint",
          "hbase.security.authentication" : "simple",
          "hbase.regionserver.handler.count" : "30",
          "hbase.bulkload.staging.dir" : "/apps/hbase/staging",
          "hbase.regionserver.port" : "16020",
          "hbase.security.authorization" : "false",
          "hbase.zookeeper.property.clientPort" : "2181",
          "hbase.defaults.for.version.skip" : "true",
          "hbase.hregion.memstore.block.multiplier" : "4"
        }
      }
    },
    {
      "hive-log4j2" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nstatus = INFO\nname = HiveLog4j2\npackages = org.apache.hadoop.hive.ql.log\n\n# list of properties\nproperty.hive.log.level = INFO\nproperty.hive.root.logger = DRFA\nproperty.hive.log.dir = ${sys:java.io.tmpdir}/${sys:user.name}\nproperty.hive.log.file = hive.log\nproperty.hive.perflogger.log.level = INFO\n\n# list of all appenders\nappenders = console, DRFA\n\n# console appender\nappender.console.type = Console\nappender.console.name = console\nappender.console.target = SYSTEM_ERR\nappender.console.layout.type = PatternLayout\nappender.console.layout.pattern = %d{ISO8601} %5p [%t] %c{2}: %m%n\n\n# daily rolling file appender\nappender.DRFA.type = RollingRandomAccessFile\nappender.DRFA.name = DRFA\nappender.DRFA.fileName = ${sys:hive.log.dir}/${sys:hive.log.file}\n# Use %pid in the filePattern to append <process-id>@<host-name> to the filename if you want separate log files for different CLI session\nappender.DRFA.filePattern = ${sys:hive.log.dir}/${sys:hive.log.file}.%d{yyyy-MM-dd}\nappender.DRFA.layout.type = PatternLayout\nappender.DRFA.layout.pattern = %d{ISO8601} %5p [%t] %c{2}: %m%n\nappender.DRFA.policies.type = Policies\nappender.DRFA.policies.time.type = TimeBasedTriggeringPolicy\nappender.DRFA.policies.time.interval = 1\nappender.DRFA.policies.time.modulate = true\nappender.DRFA.strategy.type = DefaultRolloverStrategy\nappender.DRFA.strategy.max = 15\n\n# list of all loggers\nloggers = NIOServerCnxn, ClientCnxnSocketNIO, DataNucleus, Datastore, JPOX, PerfLogger\n\nlogger.NIOServerCnxn.name = org.apache.zookeeper.server.NIOServerCnxn\nlogger.NIOServerCnxn.level = WARN\n\nlogger.ClientCnxnSocketNIO.name = org.apache.zookeeper.ClientCnxnSocketNIO\nlogger.ClientCnxnSocketNIO.level = WARN\n\nlogger.DataNucleus.name = DataNucleus\nlogger.DataNucleus.level = ERROR\n\nlogger.Datastore.name = Datastore\nlogger.Datastore.level = ERROR\n\nlogger.JPOX.name = JPOX\nlogger.JPOX.level = ERROR\n\nlogger.PerfLogger.name = org.apache.hadoop.hive.ql.log.PerfLogger\nlogger.PerfLogger.level = ${sys:hive.perflogger.log.level}\n\n# root logger\nrootLogger.level = ${sys:hive.log.level}\nrootLogger.appenderRefs = root\nrootLogger.appenderRef.root.ref = ${sys:hive.root.logger}"
        }
      }
    },
    {
      "ranger-hive-policymgr-ssl" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "zookeeper-logsearch-conf" : {
        "properties_attributes" : { },
        "properties" : {
          "component_mappings" : "ZOOKEEPER_SERVER:zookeeper",
          "content" : "\n{\n  \"input\":[\n    {\n     \"type\":\"zookeeper\",\n     \"rowtype\":\"service\",\n     \"path\":\"{{default('/configurations/zookeeper-env/zk_log_dir', '/var/log/zookeeper')}}/zookeeper*.log\"\n    }\n  ],\n  \"filter\":[\n   {\n      \"filter\":\"grok\",\n      \"conditions\":{\n        \"fields\":{\"type\":[\"zookeeper\"]}\n      },\n     \"log4j_format\":\"%d{ISO8601} - %-5p [%t:%C{1}@%L] - %m%n\",\n     \"multiline_pattern\":\"^(%{TIMESTAMP_ISO8601:logtime})\",\n     \"message_pattern\":\"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}-%{SPACE}%{LOGLEVEL:level}%{SPACE}\\\\[%{DATA:thread_name}\\\\@%{INT:line_number}\\\\]%{SPACE}-%{SPACE}%{GREEDYDATA:log_message}\",\n     \"post_map_values\": {\n       \"logtime\": {\n         \"map_date\":{\n           \"target_date_pattern\":\"yyyy-MM-dd HH:mm:ss,SSS\"\n         }\n       }\n     }\n    }\n   ]\n}",
          "service_name" : "Zookeeper"
        }
      }
    },
    {
      "ssl-server" : {
        "properties_attributes" : { },
        "properties" : {
          "ssl.server.truststore.location" : "/etc/security/serverKeys/all.jks",
          "ssl.server.truststore.reload.interval" : "10000",
          "ssl.server.truststore.type" : "jks",
          "ssl.server.keystore.location" : "/etc/security/serverKeys/keystore.jks",
          "ssl.server.keystore.type" : "jks"
        }
      }
    },
    {
      "ranger-hive-plugin-properties" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "hadoop-policy" : {
        "properties_attributes" : { },
        "properties" : {
          "security.inter.datanode.protocol.acl" : "*",
          "security.refresh.usertogroups.mappings.protocol.acl" : "hadoop",
          "security.admin.operations.protocol.acl" : "hadoop",
          "security.client.datanode.protocol.acl" : "*",
          "security.datanode.protocol.acl" : "*",
          "security.inter.tracker.protocol.acl" : "*",
          "security.job.client.protocol.acl" : "*",
          "security.client.protocol.acl" : "*",
          "security.job.task.protocol.acl" : "*",
          "security.refresh.policy.protocol.acl" : "hadoop",
          "security.namenode.protocol.acl" : "*"
        }
      }
    },
    {
      "core-site" : {
        "properties_attributes" : {
          "final" : {
            "fs.defaultFS" : "true"
          }
        },
        "properties" : {
          "fs.defaultFS" : "hdfs://%HOSTGROUP::host_group_3%:8020",
          "ipc.server.tcpnodelay" : "true",
          "io.compression.codec.lzo.class" : "com.hadoop.compression.lzo.LzoCodec",
          "mapreduce.jobtracker.webinterface.trusted" : "false",
          "hadoop.security.auth_to_local" : "DEFAULT",
          "hadoop.proxyuser.root.groups" : "*",
          "ipc.client.idlethreshold" : "8000",
          "hadoop.proxyuser.hdfs.groups" : "*",
          "fs.trash.interval" : "360",
          "hadoop.http.authentication.simple.anonymous.allowed" : "true",
          "hadoop.security.authorization" : "false",
          "ipc.client.connection.maxidletime" : "30000",
          "hadoop.proxyuser.hive.hosts" : "*",
          "hadoop.proxyuser.root.hosts" : "host_group_1",
          "ha.failover-controller.active-standby-elector.zk.op.retries" : "120",
          "hadoop.security.authentication" : "simple",
          "hadoop.proxyuser.hdfs.hosts" : "*",
          "ipc.client.connect.max.retries" : "50",
          "io.file.buffer.size" : "131072",
          "net.topology.script.file.name" : "/etc/hadoop/conf/topology_script.py",
          "io.compression.codecs" : "org.apache.hadoop.io.compress.GzipCodec,org.apache.hadoop.io.compress.DefaultCodec,com.hadoop.compression.lzo.LzoCodec,com.hadoop.compression.lzo.LzopCodec,org.apache.hadoop.io.compress.SnappyCodec",
          "hadoop.proxyuser.hive.groups" : "*",
          "hadoop.proxyuser.yarn.hosts" : "*",
          "lzo_jar_path" : "hadoop/share/lib/hadoop-lzo-0.4.20-SNAPSHOT.jar",
          "io.serializations" : "org.apache.hadoop.io.serializer.WritableSerialization"
        }
      }
    },
    {
      "spark2-defaults" : {
        "properties_attributes" : { },
        "properties" : {
          "spark.history.kerberos.keytab" : "none",
          "spark.history.ui.port" : "18081",
          "spark.driver.extraLibraryPath" : "{{spark_hadoop_lib_native}}",
          "spark.eventLog.dir" : "hdfs:///spark2-history/",
          "spark.eventLog.enabled" : "true",
          "spark.executor.extraLibraryPath" : "{{spark_hadoop_lib_native}}",
          "spark.history.kerberos.principal" : "none",
          "spark.history.provider" : "org.apache.spark.deploy.history.FsHistoryProvider",
          "spark.yarn.historyServer.address" : "host_group_3:18081",
          "spark.history.fs.logDirectory" : "hdfs:///spark2-history/",
          "spark.yarn.queue" : "default"
        }
      }
    },
    {
      "hdfs-site" : {
        "properties_attributes" : {
          "final" : {
            "dfs.namenode.http-bind-host" : "true",
            "dfs.namenode.rpc-bind-host" : "true",
            "dfs.webhdfs.enabled" : "true",
            "dfs.namenode.http-address" : "true",
            "dfs.support.append" : "true",
            "dfs.namenode.name.dir" : "true",
            "dfs.datanode.failed.volumes.tolerated" : "true",
            "dfs.namenode.https-bind-host" : "true",
            "dfs.datanode.data.dir" : "true"
          }
        },
        "properties" : {
          "dfs.replication" : "3",
          "dfs.namenode.audit.log.async" : "true",
          "dfs.namenode.checkpoint.dir" : "/srv/nbs/0/hadoop/hdfs/namesecondary",
          "dfs.namenode.avoid.read.stale.datanode" : "true",
          "dfs.journalnode.http-address" : "0.0.0.0:8480",
          "dfs.namenode.rpc-address" : "%HOSTGROUP::host_group_3%:8020",
          "dfs.namenode.https-address" : "%HOSTGROUP::host_group_3%:50470",
          "dfs.image.compression.codec" : "com.hadoop.compression.lzo.LzoCodec",
          "dfs.client.socket-timeout" : "3000000",
          "dfs.client.read.shortcircuit.streams.cache.size" : "4096",
          "dfs.hosts.exclude" : "/etc/hadoop/conf/dfs.exclude",
          "dfs.namenode.acls.enabled" : "true",
          "dfs.namenode.rpc-bind-host" : "0.0.0.0",
          "dfs.datanode.socket.write.timeout" : "3000000",
          "dfs.image.compress" : "true",
          "dfs.namenode.accesstime.precision" : "0",
          "dfs.namenode.fslock.fair" : "false",
          "dfs.permissions.enabled" : "true",
          "dfs.datanode.balance.bandwidthPerSec" : "6250000",
          "dfs.namenode.stale.datanode.interval" : "30000",
          "dfs.namenode.http-bind-host" : "0.0.0.0",
          "dfs.content-summary.limit" : "5000",
          "dfs.http.policy" : "HTTP_ONLY",
          "dfs.journalnode.https-address" : "0.0.0.0:8481",
          "dfs.datanode.du.reserved" : "26405587968",
          "dfs.domain.socket.path" : "/var/lib/hadoop-hdfs/dn_socket",
          "dfs.datanode.ipc.address" : "0.0.0.0:8010",
          "dfs.cluster.administrators" : " hdfs",
          "dfs.datanode.max.transfer.threads" : "4096",
          "dfs.namenode.handler.count" : "100",
          "dfs.https.port" : "50470",
          "dfs.replication.max" : "50",
          "dfs.client.read.shortcircuit" : "true",
          "dfs.webhdfs.enabled" : "true",
          "dfs.namenode.http-address" : "%HOSTGROUP::host_group_3%:50070",
          "dfs.namenode.name.dir" : "/srv/nbs/0/hadoop/hdfs/namenode",
          "dfs.namenode.avoid.write.stale.datanode" : "true",
          "dfs.datanode.https.address" : "0.0.0.0:50475",
          "dfs.datanode.failed.volumes.tolerated" : "0",
          "dfs.client.retry.policy.enabled" : "false",
          "dfs.namenode.https-bind-host" : "0.0.0.0",
          "dfs.namenode.startup.delay.block.deletion.sec" : "3600",
          "dfs.block.access.token.enable" : "true",
          "dfs.datanode.data.dir" : "/srv/nbs/0/hadoop/hdfs/data",
          "dfs.permissions.superusergroup" : "hdfs",
          "dfs.blocksize" : "134217728",
          "dfs.namenode.checkpoint.edits.dir" : "${dfs.namenode.checkpoint.dir}",
          "dfs.datanode.address" : "0.0.0.0:50010",
          "dfs.blockreport.initialDelay" : "120",
          "dfs.datanode.data.dir.perm" : "750",
          "dfs.namenode.write.stale.datanode.ratio" : "1.0f",
          "dfs.namenode.name.dir.restore" : "true",
          "dfs.heartbeat.interval" : "3",
          "dfs.namenode.secondary.http-address" : "%HOSTGROUP::host_group_2%:50090",
          "dfs.namenode.checkpoint.txns" : "1000000",
          "dfs.journalnode.edits.dir" : "/hadoop/hdfs/journalnode",
          "dfs.support.append" : "true",
          "fs.permissions.umask-mode" : "027",
          "dfs.namenode.safemode.threshold-pct" : "1",
          "dfs.namenode.checkpoint.period" : "21600",
          "dfs.datanode.http.address" : "0.0.0.0:50075"
        }
      }
    },
    {
      "kafka-broker" : {
        "properties_attributes" : { },
        "properties" : {
          "replica.high.watermark.checkpoint.interval.ms" : "5000",
          "offsets.topic.num.partitions" : "50",
          "auto.create.topics.enable" : "true",
          "controller.socket.timeout.ms" : "30000",
          "external.kafka.metrics.include.prefix" : "kafka.network.RequestMetrics.ResponseQueueTimeMs.request.OffsetCommit.98percentile,kafka.network.RequestMetrics.ResponseQueueTimeMs.request.Offsets.95percentile,kafka.network.RequestMetrics.ResponseSendTimeMs.request.Fetch.95percentile,kafka.network.RequestMetrics.RequestsPerSec.request",
          "replica.socket.receive.buffer.bytes" : "65536",
          "min.insync.replicas" : "1",
          "kafka.timeline.metrics.maxRowCacheSize" : "10000",
          "zookeeper.connection.timeout.ms" : "25000",
          "controlled.shutdown.retry.backoff.ms" : "5000",
          "replica.fetch.wait.max.ms" : "500",
          "num.recovery.threads.per.data.dir" : "1",
          "kafka.timeline.metrics.reporter.sendInterval" : "5900",
          "log.roll.hours" : "168",
          "default.replication.factor" : "1",
          "kafka.timeline.metrics.port" : "{{metric_collector_port}}",
          "offsets.topic.segment.bytes" : "104857600",
          "fetch.purgatory.purge.interval.requests" : "10000",
          "replica.socket.timeout.ms" : "30000",
          "message.max.bytes" : "1000000",
          "replica.lag.max.messages" : "4000",
          "kafka.ganglia.metrics.port" : "8671",
          "num.io.threads" : "8",
          "offsets.commit.required.acks" : "-1",
          "delete.topic.enable" : "false",
          "log.index.interval.bytes" : "4096",
          "offsets.commit.timeout.ms" : "5000",
          "log.segment.bytes" : "1073741824",
          "offset.metadata.max.bytes" : "4096",
          "zookeeper.connect" : "%HOSTGROUP::host_group_1%:2181,%HOSTGROUP::host_group_2%:2181,%HOSTGROUP::host_group_3%:2181",
          "zookeeper.sync.time.ms" : "2000",
          "num.replica.fetchers" : "1",
          "log.dirs" : "/srv/nbs/0/kafka-logs",
          "controlled.shutdown.enable" : "true",
          "compression.type" : "producer",
          "offsets.load.buffer.size" : "5242880",
          "controlled.shutdown.max.retries" : "3",
          "offsets.topic.replication.factor" : "3",
          "queued.max.requests" : "500",
          "auto.leader.rebalance.enable" : "true",
          "leader.imbalance.check.interval.seconds" : "300",
          "replica.lag.time.max.ms" : "10000",
          "socket.request.max.bytes" : "104857600",
          "zookeeper.session.timeout.ms" : "30000",
          "kafka.timeline.metrics.truststore.path" : "{{metric_truststore_path}}",
          "log.retention.bytes" : "-1",
          "num.network.threads" : "3",
          "kafka.timeline.metrics.protocol" : "{{metric_collector_protocol}}",
          "offsets.retention.minutes" : "86400000",
          "kafka.metrics.reporters" : "org.apache.hadoop.metrics2.sink.kafka.KafkaTimelineMetricsReporter",
          "log.cleanup.interval.mins" : "10",
          "socket.send.buffer.bytes" : "102400",
          "log.retention.hours" : "168",
          "kafka.timeline.metrics.reporter.enabled" : "true",
          "num.partitions" : "1",
          "listeners" : "PLAINTEXT://0.0.0.0:6667",
          "socket.receive.buffer.bytes" : "102400",
          "replica.fetch.min.bytes" : "1",
          "kafka.timeline.metrics.hosts" : "{{ams_collector_hosts}}",
          "external.kafka.metrics.exclude.prefix" : "kafka.network.RequestMetrics,kafka.server.DelayedOperationPurgatory,kafka.server.BrokerTopicMetrics.BytesRejectedPerSec",
          "controller.message.queue.size" : "10",
          "kafka.ganglia.metrics.reporter.enabled" : "true",
          "log.index.size.max.bytes" : "10485760",
          "offsets.retention.check.interval.ms" : "600000",
          "producer.purgatory.purge.interval.requests" : "10000",
          "kafka.ganglia.metrics.group" : "kafka",
          "offsets.topic.compression.codec" : "0",
          "replica.fetch.max.bytes" : "1048576",
          "leader.imbalance.per.broker.percentage" : "10",
          "kafka.timeline.metrics.truststore.type" : "{{metric_truststore_type}}"
        }
      }
    },
    {
      "yarn-site" : {
        "properties_attributes" : { },
        "properties" : {
          "yarn.resourcemanager.zk-address" : "%HOSTGROUP::host_group_1%:2181,%HOSTGROUP::host_group_2%:2181,%HOSTGROUP::host_group_3%:2181",
          "yarn.nodemanager.container-monitor.interval-ms" : "3000",
          "yarn.nodemanager.linux-container-executor.group" : "hadoop",
          "yarn.application.classpath" : "",
          "yarn.admin.acl" : "yarn",
          "yarn.nodemanager.remote-app-log-dir-suffix" : "logs",
          "yarn.nodemanager.address" : "0.0.0.0:45454",
          "yarn.resourcemanager.webapp.address" : "%HOSTGROUP::host_group_2%:8088",
          "yarn.timeline-service.leveldb-timeline-store.ttl-interval-ms" : "300000",
          "yarn.scheduler.maximum-allocation-vcores" : "3",
          "yarn.timeline-service.enabled" : "false",
          "yarn.nodemanager.aux-services" : "mapreduce_shuffle,spark_shuffle",
          "yarn.nodemanager.resource.cpu-vcores" : "3",
          "yarn.resourcemanager.webapp.delegation-token-auth-filter.enabled" : "false",
          "yarn.nodemanager.aux-services.spark_shuffle.class" : "org.apache.spark.network.yarn.YarnShuffleService",
          "yarn.nodemanager.log-aggregation.debug-enabled" : "false",
          "yarn.resourcemanager.zk-acl" : "world:anyone:rwcda",
          "yarn.client.nodemanager-connect.max-wait-ms" : "60000",
          "yarn.http.policy" : "HTTP_ONLY",
          "yarn.timeline-service.http-authentication.simple.anonymous.allowed" : "true",
          "yarn.resourcemanager.zk-state-store.parent-path" : "/rmstore",
          "yarn.timeline-service.leveldb-timeline-store.start-time-read-cache-size" : "10000",
          "yarn.resourcemanager.admin.address" : "%HOSTGROUP::host_group_2%:8141",
          "yarn.nodemanager.linux-container-executor.cgroups.strict-resource-usage" : "false",
          "yarn.resourcemanager.resource-tracker.address" : "%HOSTGROUP::host_group_2%:8025",
          "yarn.nodemanager.delete.debug-delay-sec" : "0",
          "yarn.resourcemanager.fs.state-store.retry-policy-spec" : "2000, 500",
          "yarn.timeline-service.http-authentication.type" : "simple",
          "yarn.timeline-service.ttl-enable" : "true",
          "yarn.log-aggregation.retain-seconds" : "604800",
          "yarn.nodemanager.resource.memory-mb" : "16384",
          "yarn.nodemanager.disk-health-checker.min-healthy-disks" : "0.25",
          "yarn.node-labels.enabled" : "false",
          "yarn.nodemanager.log.retain-second" : "604800",
          "yarn.resourcemanager.connect.max-wait.ms" : "900000",
          "yarn.resourcemanager.zk-num-retries" : "1000",
          "yarn.scheduler.minimum-allocation-vcores" : "1",
          "yarn.resourcemanager.scheduler.class" : "org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler",
          "yarn.resourcemanager.system-metrics-publisher.enabled" : "false",
          "yarn.timeline-service.client.max-retries" : "30",
          "yarn.timeline-service.client.retry-interval-ms" : "1000",
          "yarn.timeline-service.store-class" : "org.apache.hadoop.yarn.server.timeline.LeveldbTimelineStore",
          "yarn.timeline-service.bind-host" : "0.0.0.0",
          "yarn.nodemanager.container-metrics.unregister-delay-ms" : "60000",
          "yarn.timeline-service.generic-application-history.store-class" : "org.apache.hadoop.yarn.server.applicationhistoryservice.NullApplicationHistoryStore",
          "yarn.resourcemanager.fs.state-store.uri" : " ",
          "yarn.nodemanager.linux-container-executor.cgroups.hierarchy" : "hadoop-yarn",
          "yarn.resourcemanager.recovery.enabled" : "true",
          "yarn.timeline-service.entity-group-fs-store.group-id-plugin-classpath" : "",
          "yarn.resourcemanager.scheduler.address" : "%HOSTGROUP::host_group_2%:8030",
          "yarn.timeline-service.leveldb-timeline-store.start-time-write-cache-size" : "10000",
          "yarn.timeline-service.ttl-ms" : "2678400000",
          "yarn.nodemanager.health-checker.script.timeout-ms" : "60000",
          "yarn.log.server.url" : "http://%HOSTGROUP::host_group_2%:19888/jobhistory/logs",
          "yarn.resourcemanager.address" : "%HOSTGROUP::host_group_2%:8050",
          "yarn.timeline-service.recovery.enabled" : "true",
          "yarn.nodemanager.recovery.dir" : "/usr/ndp/data/yarn/recovery-state",
          "yarn.resourcemanager.scheduler.monitor.enable" : "false",
          "hadoop.registry.rm.enabled" : "false",
          "yarn.resourcemanager.bind-host" : "0.0.0.0",
          "yarn.nodemanager.log-aggregation.num-log-files-per-app" : "30",
          "yarn.nodemanager.admin-env" : "MALLOC_ARENA_MAX=$MALLOC_ARENA_MAX",
          "yarn.resourcemanager.system-metrics-publisher.dispatcher.pool-size" : "10",
          "yarn.acl.enable" : "false",
          "yarn.resourcemanager.ha.enabled" : "false",
          "yarn.client.nodemanager-connect.retry-interval-ms" : "10000",
          "yarn.nodemanager.linux-container-executor.resources-handler.class" : "org.apache.hadoop.yarn.server.nodemanager.util.DefaultLCEResourcesHandler",
          "yarn.timeline-service.leveldb-timeline-store.read-cache-size" : "104857600",
          "yarn.nodemanager.local-dirs" : "/srv/nbs/0/hadoop/yarn/local",
          "yarn.timeline-service.leveldb-timeline-store.path" : "/usr/ndp/data/yarn/timeline",
          "yarn.nodemanager.recovery.enabled" : "true",
          "yarn.resourcemanager.zk-timeout-ms" : "10000",
          "yarn.resourcemanager.am.max-attempts" : "2",
          "yarn.resourcemanager.state-store.max-completed-applications" : "${yarn.resourcemanager.max-completed-applications}",
          "yarn.nodemanager.linux-container-executor.cgroups.mount" : "false",
          "yarn.node-labels.fs-store.root-dir" : "/system/yarn/node-labels",
          "yarn.node-labels.fs-store.retry-policy-spec" : "2000, 500",
          "yarn.nodemanager.aux-services.mapreduce_shuffle.class" : "org.apache.hadoop.mapred.ShuffleHandler",
          "yarn.log-aggregation-enable" : "true",
          "yarn.resourcemanager.work-preserving-recovery.enabled" : "true",
          "yarn.resourcemanager.store.class" : "org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore",
          "yarn.timeline-service.leveldb-state-store.path" : "/usr/ndp/data/yarn/timeline",
          "yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage" : "90",
          "hadoop.registry.zk.quorum" : "%HOSTGROUP::host_group_1%:2181,%HOSTGROUP::host_group_2%:2181,%HOSTGROUP::host_group_3%:2181",
          "yarn.nodemanager.log-aggregation.roll-monitoring-interval-seconds" : "3600",
          "yarn.nodemanager.container-executor.class" : "org.apache.hadoop.yarn.server.nodemanager.DefaultContainerExecutor",
          "yarn.resourcemanager.nodes.exclude-path" : "/usr/ndp/data/yarn/nodes/yarn.exclude",
          "yarn.timeline-service.state-store-class" : "org.apache.hadoop.yarn.server.timeline.recovery.LeveldbTimelineStateStore",
          "yarn.nodemanager.bind-host" : "0.0.0.0",
          "yarn.resourcemanager.hostname" : "%HOSTGROUP::host_group_2%",
          "yarn.resourcemanager.connect.retry-interval.ms" : "30000",
          "yarn.scheduler.minimum-allocation-mb" : "4096",
          "yarn.nodemanager.health-checker.interval-ms" : "135000",
          "yarn.nodemanager.disk-health-checker.min-free-space-per-disk-mb" : "1000",
          "yarn.resourcemanager.zk-retry-interval-ms" : "1000",
          "yarn.nodemanager.remote-app-log-dir" : "/app-logs",
          "yarn.scheduler.maximum-allocation-mb" : "16384",
          "yarn.nodemanager.vmem-check-enabled" : "false",
          "yarn.resourcemanager.webapp.https.address" : "%HOSTGROUP::host_group_2%:8090",
          "yarn.nodemanager.resource.percentage-physical-cpu-limit" : "80",
          "yarn.nodemanager.vmem-pmem-ratio" : "2.1",
          "yarn.nodemanager.log-aggregation.compression-type" : "gz",
          "yarn.resourcemanager.work-preserving-recovery.scheduling-wait-ms" : "10000",
          "yarn.nodemanager.log-dirs" : "/srv/nbs/0/hadoop/yarn/log"
        }
      }
    },
    {
      "hiveserver2-site" : {
        "properties_attributes" : { },
        "properties" : {
          "hive.security.metastore.authenticator.manager" : "org.apache.hadoop.hive.ql.security.HadoopDefaultMetastoreAuthenticator",
          "hive.service.metrics.hadoop2.component" : "hiveserver2",
          "hive.security.authorization.enabled" : "false",
          "hive.security.authorization.createtable.owner.grants" : "ALL",
          "hive.server2.webui.max.threads" : "30",
          "hive.server2.logging.operation.log.location" : "/var/log/hive/operation_logs",
          "hive.metastore.metrics.enabled" : "true",
          "hive.service.metrics.reporter" : "JSON_FILE, JMX, HADOOP2",
          "hive.server2.long.polling.timeout" : "1000ms",
          "hive.service.metrics.file.location" : "/var/log/hive/hiveserver2-report.json"
        }
      }
    },
    {
      "spark2-env" : {
        "properties_attributes" : { },
        "properties" : {
          "spark_data_dir" : "/srv/nbs/0/usr/ndp/data/spark",
          "spark_user" : "spark",
          "spark_thrift_cmd_opts" : "-XX:MaxPermSize=256m -XX:MaxDirectMemorySize=96m",
          "service_archive_rela_path" : "{\"DEFAULT\":\"spark/spark-2.1.0-bin-ne-1.3.0.tgz\", \"SPARK2_CLIENT\":\"spark/spark-2.1.2-bin-hadoop2.7.tgz\", \"SPARK2_RANGER_PLUGIN\":\"ranger/ranger-0.5.4-4.9.5-hotfix-spark-plugin.tar.gz\"}",
          "spark_daemon_memory" : "3072",
          "service_version" : "2.1.1.130",
          "hive_kerberos_keytab" : "{{hive_kerberos_keytab}}",
          "spark_log_dir" : "/var/log/spark2",
          "content" : "\n#!/usr/bin/env bash\n\n# This file is sourced when running various Spark programs.\n# Copy it as spark-env.sh and edit that to configure Spark for your site.\n\n# Options read in YARN client mode\n#SPARK_EXECUTOR_INSTANCES=\"2\" #Number of workers to start (Default: 2)\n#SPARK_EXECUTOR_CORES=\"1\" #Number of cores for the workers (Default: 1).\n#SPARK_EXECUTOR_MEMORY=\"1G\" #Memory per Worker (e.g. 1000M, 2G) (Default: 1G)\n#SPARK_DRIVER_MEMORY=\"512M\" #Memory for Master (e.g. 1000M, 2G) (Default: 512 Mb)\n#SPARK_YARN_APP_NAME=\"spark\" #The name of your application (Default: Spark)\n#SPARK_YARN_QUEUE=\"default\" #The hadoop queue to use for allocation requests (Default: default)\n#SPARK_YARN_DIST_FILES=\"\" #Comma separated list of files to be distributed with the job.\n#SPARK_YARN_DIST_ARCHIVES=\"\" #Comma separated list of archives to be distributed with the job.\n\n# Generic options for the daemons used in the standalone deploy mode\nexport SPARK_HOME=${SPARK_HOME:-{{spark_home}}}\n\n# Alternate conf dir. (Default: ${SPARK_HOME}/conf)\nexport SPARK_CONF_DIR=${SPARK_CONF_DIR:-{{spark_home}}/conf}\n\n# Where log files are stored.(Default:${SPARK_HOME}/logs)\n#export SPARK_LOG_DIR=${SPARK_HOME:-{{spark_home}}}/logs\nexport SPARK_LOG_DIR={{spark_log_dir}}\n\n# Where the pid file is stored. (Default: /tmp)\nexport SPARK_PID_DIR={{spark_pid_dir}}\n\n#Memory for Master, Worker and history server (default: 1024MB)\nexport SPARK_DAEMON_MEMORY={{spark_daemon_memory}}m\nexport SPARK_DAEMON_JAVA_OPTS=\"{{spark_thrift_cmd_opts_properties}} ${SPARK_DAEMON_JAVA_OPTS}\"\n\n# A string representing this instance of spark.(Default: $USER)\nSPARK_IDENT_STRING=$USER\n\n# The scheduling priority for daemons. (Default: 0)\nSPARK_NICENESS=0\n\nexport HADOOP_HOME=${HADOOP_HOME:-{{hadoop_home}}}\nexport HADOOP_CONF_DIR=${HADOOP_CONF_DIR:-{{hadoop_conf_dir}}}\nexport LD_LIBRARY_PATH={{spark_hadoop_lib_native}}:$LD_LIBRARY_PATH\n\n# The java implementation to use.\nexport JAVA_HOME={{java_home}}",
          "spark_group" : "spark",
          "service_archive_root_dir" : "{\"DEFAULT\":\"spark-2.1.0-bin-ne-1.3.0\", \"SPARK2_CLIENT\":\"spark-2.1.2-bin-hadoop2.7\", \"SPARK2_RANGER_PLUGIN\":\"ranger-0.5.4-4.9.5-hotfix-spark-plugin\"}",
          "spark_pid_dir" : "/var/run/spark2",
          "hive_kerberos_principal" : "{{hive_kerberos_principal}}",
          "server_role_directory_map" : "{\"SPARK2_JOBHISTORYSERVER\":\"spark2_jobhistoryserver\",\"SPARK2_THRIFTSERVER\":\"spark2_thriftserver\",\"SPARK2_CLIENT\":\"spark2_client\", \"SPARK2_RANGER_PLUGIN\":\"spark2_ranger_plugin\"}"
        }
      }
    },
    {
      "yarn-logsearch-conf" : {
        "properties_attributes" : { },
        "properties" : {
          "component_mappings" : "RESOURCEMANAGER:yarn_resourcemanager,yarn_historyserver,yarn_jobsummary;NODEMANAGER:yarn_nodemanager;APP_TIMELINE_SERVER:yarn_timelineserver",
          "content" : "\n{\n  \"input\":[\n    {\n      \"type\":\"yarn_nodemanager\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/yarn-env/yarn_log_dir_prefix', '/var/log/hadoop')}}/{{default('configurations/yarn-env/yarn_user', 'yarn')}}/yarn-{{default('configurations/yarn-env/yarn_user', 'yarn')}}-nodemanager-*.log\"\n    },\n    {\n      \"type\":\"yarn_resourcemanager\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/yarn-env/yarn_log_dir_prefix', '/var/log/hadoop')}}/{{default('configurations/yarn-env/yarn_user', 'yarn')}}/yarn-{{default('configurations/yarn-env/yarn_user', 'yarn')}}-resourcemanager-*.log\"\n    },\n    {\n      \"type\":\"yarn_timelineserver\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/yarn-env/yarn_log_dir_prefix', '/var/log/hadoop')}}/{{default('configurations/yarn-env/yarn_user', 'yarn')}}/yarn-{{default('configurations/yarn-env/yarn_user', 'yarn')}}-timelineserver-*.log\"\n    },\n    {\n      \"type\":\"yarn_historyserver\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/yarn-env/yarn_log_dir_prefix', '/var/log/hadoop')}}/{{default('configurations/yarn-env/yarn_user', 'yarn')}}/yarn-{{default('configurations/yarn-env/yarn_user', 'yarn')}}-historyserver-*.log\"\n    },\n    {\n      \"type\":\"yarn_jobsummary\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/yarn-env/yarn_log_dir_prefix', '/var/log/hadoop')}}/{{default('configurations/yarn-env/yarn_user', 'yarn')}}/hadoop-mapreduce.jobsummary.log\"\n    }\n   ],\n  \"filter\":[\n    {\n      \"filter\":\"grok\",\n      \"conditions\":{\n        \"fields\":{\n          \"type\":[\n            \"yarn_historyserver\",\n            \"yarn_jobsummary\",\n            \"yarn_nodemanager\",\n            \"yarn_resourcemanager\",\n            \"yarn_timelineserver\"\n          ]\n         }\n       },\n      \"log4j_format\":\"%d{ISO8601} %-5p %c{2} (%F:%M(%L)) - %m%n\",\n      \"multiline_pattern\":\"^(%{TIMESTAMP_ISO8601:logtime})\",\n      \"message_pattern\":\"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}%{LOGLEVEL:level}%{SPACE}%{JAVACLASS:logger_name}%{SPACE}\\\\(%{JAVAFILE:file}:%{JAVAMETHOD:method}\\\\(%{INT:line_number}\\\\)\\\\)%{SPACE}-%{SPACE}%{GREEDYDATA:log_message}\",\n      \"post_map_values\":{\n        \"logtime\":{\n          \"map_date\":{\n            \"target_date_pattern\":\"yyyy-MM-dd HH:mm:ss,SSS\"\n          }\n         }\n       }\n     }\n   ]\n}",
          "service_name" : "YARN"
        }
      }
    },
    {
      "spark2-hive-site-override" : {
        "properties_attributes" : { },
        "properties" : {
          "hive.exec.max.dynamic.partitions" : "10000",
          "hive.server2.zookeeper.namespace" : "spark-hivethrfitserver",
          "hive.metastore.client.socket.lifetime" : "60s",
          "inherit.configuration.list.from.hive" : "\n      hive.server2.enable.doAs,hive.server2.thrift.port,hive.server2.authentication,hive.server2.authentication.kerberos.principal,\n      hive.server2.authentication.kerberos.keytab,hive.security.authorization.createtable.owner.grants,hive.metastore.uris,hive.metastore.sasl.enabled,\n      hive.server2.thrift.sasl.qop,hive.security.metastore.authorization.manager,hive.security.metastore.authenticator.manager,\n      hive.exec.scratchdir,hive.security.authorization.enabled,hive.security.authorization.manager,hive.security.authenticator.manager,\n      hive.conf.restricted.list,hive.exec.dynamic.partition,hive.exec.dynamic.partition.mode,hive.exec.max.dynamic.partitions.pernode,\n      hive.exec.max.dynamic.partitions,hive.error.on.empty.partition,datanucleus.autoCreateSchema,datanucleus.fixedDatastore,hive.metastore.schema.verification,\n      hive.metastore.kerberos.principal,hive.metastore.kerberos.keytab.file",
          "hive.error.on.empty.partition" : "true",
          "hive.server2.support.dynamic.service.discovery" : "true",
          "hive.exec.dynamic.partition" : "true",
          "hive.zookeeper.quorum" : "host_group_1:2181,host_group_2:2181,host_group_3:2181",
          "hive.exec.dynamic.partition.mode" : "nonstrict",
          "hive.exec.max.dynamic.partitions.pernode" : "10000"
        }
      }
    },
    {
      "ams-hbase-security-site" : {
        "properties_attributes" : { },
        "properties" : {
          "hadoop.security.authentication" : "",
          "hbase.myclient.keytab" : ""
        }
      }
    },
    {
      "yarn-env" : {
        "properties_attributes" : { },
        "properties" : {
          "yarn_cgroups_enabled" : "false",
          "yarn_data_dir" : "/srv/nbs/0/usr/ndp/data/yarn",
          "yarn_user_nproc_limit" : "65536",
          "yarn_log_dir_prefix" : "/var/log/hadoop-yarn",
          "apptimelineserver_heapsize" : "1024",
          "service_archive_rela_path" : "{\"DEFAULT\":\"hadoop/hadoop-2.7.3-1.2.0.tar.gz\", \"METRICS_HADOOP_SINK\":\"ambari-metrics/ambari-metrics-hadoop-sink-2.5.1.0.0.tar.gz\"}",
          "service_version" : "2.7.3",
          "yarn_user_nofile_limit" : "32768",
          "content" : "\nexport HADOOP_YARN_HOME={{component_home}}\nexport YARN_LOG_DIR={{yarn_log_dir}}\nexport YARN_PID_DIR={{yarn_pid_dir}}\nexport HADOOP_LIBEXEC_DIR={{component_libexec_dir}}\nexport JAVA_HOME={{java_home}}\nexport JAVA_LIBRARY_PATH=\"${JAVA_LIBRARY_PATH}:{{hadoop_java_io_tmpdir}}\"\n\n# We need to add the EWMA appender for the yarn daemons only;\n# however, YARN_ROOT_LOGGER is shared by the yarn client and the\n# daemons. This is restrict the EWMA appender to daemons only.\nINVOKER=\"${0##*/}\"\nif [ \"$INVOKER\" == \"yarn-daemon.sh\" ]; then\n  export YARN_ROOT_LOGGER=${YARN_ROOT_LOGGER:-INFO,EWMA,RFA}\nfi\n\n# User for YARN daemons\nexport HADOOP_YARN_USER=${HADOOP_YARN_USER:-yarn}\n\n# resolve links - $0 may be a softlink\nexport YARN_CONF_DIR=\"${YARN_CONF_DIR:-$HADOOP_YARN_HOME/conf}\"\n\n# some Java parameters\nexport JAVA_HOME={{java_home}}\nif [ \"$JAVA_HOME\" != \"\" ]; then\n  #echo \"run java in $JAVA_HOME\"\n  JAVA_HOME=$JAVA_HOME\nfi\n\nif [ \"$JAVA_HOME\" = \"\" ]; then\n  echo \"Error: JAVA_HOME is not set.\"\n  exit 1\nfi\n\nJAVA=$JAVA_HOME/bin/java\nJAVA_HEAP_MAX=-Xmx1000m\n\n# For setting YARN specific HEAP sizes please use this\n# Parameter and set appropriately\nYARN_HEAPSIZE={{yarn_heapsize}}\n\n# check envvars which might override default args\nif [ \"$YARN_HEAPSIZE\" != \"\" ]; then\n  JAVA_HEAP_MAX=\"-Xmx\"\"$YARN_HEAPSIZE\"\"m\"\nfi\n\n# Resource Manager specific parameters\n\n# Specify the max Heapsize for the ResourceManager using a numerical value\n# in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n# the value to 1000.\n# This value will be overridden by an Xmx setting specified in either YARN_OPTS\n# and/or YARN_RESOURCEMANAGER_OPTS.\n# If not specified, the default value will be picked from either YARN_HEAPMAX\n# or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\nexport YARN_RESOURCEMANAGER_HEAPSIZE={{resourcemanager_heapsize}}\n\n# Specify the JVM options to be used when starting the ResourceManager.\n# These options will be appended to the options specified as YARN_OPTS\n# and therefore may override any similar flags set in YARN_OPTS\n#export YARN_RESOURCEMANAGER_OPTS=\n\n# Node Manager specific parameters\n\n# Specify the max Heapsize for the NodeManager using a numerical value\n# in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n# the value to 1000.\n# This value will be overridden by an Xmx setting specified in either YARN_OPTS\n# and/or YARN_NODEMANAGER_OPTS.\n# If not specified, the default value will be picked from either YARN_HEAPMAX\n# or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\nexport YARN_NODEMANAGER_HEAPSIZE={{nodemanager_heapsize}}\n\n# Specify the max Heapsize for the timeline server using a numerical value\n# in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n# the value to 1024.\n# This value will be overridden by an Xmx setting specified in either YARN_OPTS\n# and/or YARN_TIMELINESERVER_OPTS.\n# If not specified, the default value will be picked from either YARN_HEAPMAX\n# or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\nexport YARN_TIMELINESERVER_HEAPSIZE={{apptimelineserver_heapsize}}\n\n# Specify the JVM options to be used when starting the NodeManager.\n# These options will be appended to the options specified as YARN_OPTS\n# and therefore may override any similar flags set in YARN_OPTS\n#export YARN_NODEMANAGER_OPTS=\n\n# so that filenames w/ spaces are handled correctly in loops below\nIFS=\n\n\n# default log directory and file\nif [ \"$YARN_LOG_DIR\" = \"\" ]; then\n  YARN_LOG_DIR=\"$HADOOP_YARN_HOME/logs\"\nfi\nif [ \"$YARN_LOGFILE\" = \"\" ]; then\n  YARN_LOGFILE='yarn.log'\nfi\n\n# default policy file for service-level authorization\nif [ \"$YARN_POLICYFILE\" = \"\" ]; then\n  YARN_POLICYFILE=\"hadoop-policy.xml\"\nfi\n\n# restore ordinary behaviour\nunset IFS\n\n\nYARN_OPTS=\"$YARN_OPTS -Dhadoop.log.dir=$YARN_LOG_DIR\"\nYARN_OPTS=\"$YARN_OPTS -Dyarn.log.dir=$YARN_LOG_DIR\"\nYARN_OPTS=\"$YARN_OPTS -Dhadoop.log.file=$YARN_LOGFILE\"\nYARN_OPTS=\"$YARN_OPTS -Dyarn.log.file=$YARN_LOGFILE\"\nYARN_OPTS=\"$YARN_OPTS -Dyarn.home.dir=$YARN_COMMON_HOME\"\nYARN_OPTS=\"$YARN_OPTS -Dyarn.id.str=$YARN_IDENT_STRING\"\nYARN_OPTS=\"$YARN_OPTS -Dhadoop.root.logger=${YARN_ROOT_LOGGER:-INFO,console}\"\nYARN_OPTS=\"$YARN_OPTS -Dyarn.root.logger=${YARN_ROOT_LOGGER:-INFO,console}\"\nexport YARN_NODEMANAGER_OPTS=\"$YARN_NODEMANAGER_OPTS -Dnm.audit.logger=INFO,NMAUDIT\"\nexport YARN_RESOURCEMANAGER_OPTS=\"$YARN_RESOURCEMANAGER_OPTS -Drm.audit.logger=INFO,RMAUDIT\"\nif [ \"x$JAVA_LIBRARY_PATH\" != \"x\" ]; then\n  YARN_OPTS=\"$YARN_OPTS -Djava.library.path=$JAVA_LIBRARY_PATH\"\nfi\nYARN_OPTS=\"$YARN_OPTS -Dyarn.policy.file=$YARN_POLICYFILE\"\nYARN_OPTS=\"$YARN_OPTS -Djava.io.tmpdir={{hadoop_java_io_tmpdir}}\"",
          "is_supported_yarn_ranger" : "false",
          "service_check.queue.name" : "default",
          "resourcemanager_heapsize" : "1024",
          "yarn_pid_dir_prefix" : "/var/run/hadoop-yarn",
          "yarn_user" : "yarn",
          "min_user_id" : "1000",
          "service_archive_root_dir" : "{\"DEFAULT\":\"hadoop-2.7.3\", \"METRICS_HADOOP_SINK\":\"ambari-metrics-hadoop-sink-2.5.1.0.0\"}",
          "yarn_heapsize" : "1024",
          "nodemanager_heapsize" : "1024",
          "server_role_directory_map" : "{\"YARN_CLIENT\":\"yarn_client\",\"RESOURCEMANAGER\":\"yarn_resourcemanager\",\"NODEMANAGER\":\"yarn_nodemanager\",\"APP_TIMELINE_SERVER\":\"yarn_timelineserver\", \"METRICS_HADOOP_SINK\":\"ambari_metrics_hadoop_sink\"}"
        }
      }
    },
    {
      "ranger-hdfs-audit" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "ranger-hdfs-plugin-properties" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "spark2-thrift-fairscheduler" : {
        "properties_attributes" : { },
        "properties" : {
          "fairscheduler_content" : "<?xml version=\"1.0\"?>\n            <allocations>\n            <pool name=\"default\">\n            <schedulingMode>FAIR</schedulingMode>\n            <weight>1</weight>\n            <minShare>2</minShare>\n            </pool>\n            </allocations>"
        }
      }
    },
    {
      "ranger-spark2-audit" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "kafka_client_jaas_conf" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "\nKafkaClient {\ncom.sun.security.auth.module.Krb5LoginModule required\nuseTicketCache=true\nrenewTicket=true\nserviceName=\"{{kafka_bare_jaas_principal}}\";\n};"
        }
      }
    },
    {
      "ams-env" : {
        "properties_attributes" : { },
        "properties" : {
          "timeline.metrics.skip.disk.metrics.patterns" : "true",
          "metrics_collector_heapsize" : "2048",
          "failover_strategy_blacklisted_interval" : "300",
          "metrics_collector_pid_dir" : "/var/run/ambari-metrics-collector",
          "service_archive_rela_path" : "{\"METRICS_COLLECTOR\":\"ambari-metrics/ambari-metrics-collector-2.5.1.0.0.tar.gz\", \"METRICS_MONITOR\":\"ambari-metrics/ambari-metrics-monitor-2.5.1.0.0.tar.gz\", \"METRICS_GRAFANA\":\"ambari-metrics/ambari-metrics-grafana-2.5.1.0.0.tar.gz\", \"METRICS_HADOOP_SINK\":\"ambari-metrics/ambari-metrics-hadoop-sink-2.5.1.0.0.tar.gz\"}",
          "metrics_collector_log_dir" : "/var/log/ambari-metrics-collector",
          "service_version" : "0.1.1",
          "service_managed_conf_dir" : "{\"METRICS_COLLECTOR\":\"conf\", \"METRICS_MONITOR\":\"conf\", \"METRICS_GRAFANA\":\"conf\", \"METRICS_HADOOP_SINK\":\"conf\"}",
          "metrics_monitor_pid_dir" : "/var/run/ambari-metrics-monitor",
          "ams_classpath_additional" : "",
          "content" : "\n# Set environment variables here.\n\n# AMS instance name\nexport AMS_INSTANCE_NAME={{hostname}}\n\n# The java implementation to use. Java 1.6 required.\nexport JAVA_HOME={{java64_home}}\n\n# Collector Log directory for log4j\nexport AMS_COLLECTOR_LOG_DIR={{ams_collector_log_dir}}\n\n# Monitor Log directory for outfile\nexport AMS_MONITOR_LOG_DIR={{ams_monitor_log_dir}}\n\n# Collector pid directory\nexport AMS_COLLECTOR_PID_DIR={{ams_collector_pid_dir}}\n\n# Monitor pid directory\nexport AMS_MONITOR_PID_DIR={{ams_monitor_pid_dir}}\n\n# AMS HBase pid directory\nexport AMS_HBASE_PID_DIR={{hbase_pid_dir}}\n\n# AMS Collector heapsize\nexport AMS_COLLECTOR_HEAPSIZE={{metrics_collector_heapsize}}\n\n# HBase Tables Initialization check enabled\nexport AMS_HBASE_INIT_CHECK_ENABLED={{ams_hbase_init_check_enabled}}\n\n# AMS Collector options\n#export AMS_COLLECTOR_OPTS=\"-Djava.library.path=/usr/lib/ams-hbase/lib/hadoop-native\"\nexport AMS_COLLECTOR_OPTS=\"-Djava.library.path=/usr/ndp/current/hdfs_client/lib/native\"\n\n{% if security_enabled %}\nexport AMS_COLLECTOR_OPTS=\"$AMS_COLLECTOR_OPTS -Djava.security.auth.login.config={{ams_collector_jaas_config_file}}\"\n{% endif %}\n\n# AMS Collector GC options\nexport AMS_COLLECTOR_GC_OPTS=\"-XX:+UseConcMarkSweepGC -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:{{ams_collector_log_dir}}/collector-gc.log-`date +'%Y%m%d%H%M'`\"\nexport AMS_COLLECTOR_OPTS=\"$AMS_COLLECTOR_OPTS $AMS_COLLECTOR_GC_OPTS\"\n\n# Metrics collector host will be blacklisted for specified number of seconds if metric monitor failed to connect to it.\nexport AMS_FAILOVER_STRATEGY_BLACKLISTED_INTERVAL={{failover_strategy_blacklisted_interval}}\n\n# Extra Java CLASSPATH elements for Metrics Collector. Optional.\nexport COLLECTOR_ADDITIONAL_CLASSPATH={{ams_classpath_additional}}",
          "ambari_metrics_user" : "ams",
          "metrics_monitor_log_dir" : "/var/log/ambari-metrics-monitor",
          "service_archive_root_dir" : "{\"METRICS_COLLECTOR\":\"ambari-metrics-collector-2.5.1.0.0\", \"METRICS_MONITOR\":\"ambari-metrics-monitor-2.5.1.0.0\", \"METRICS_GRAFANA\":\"ambari-metrics-grafana-2.5.1.0.0\", \"METRICS_HADOOP_SINK\":\"ambari-metrics-hadoop-sink-2.5.1.0.0\"}",
          "server_role_directory_map" : "{\"METRICS_COLLECTOR\":\"ambari_metrics_collector\", \"METRICS_MONITOR\":\"ambari_metrics_monitor\", \"METRICS_GRAFANA\":\"ambari_metrics_grafana\",\"METRICS_HADOOP_SINK\":\"ambari_metrics_hadoop_sink\"}"
        }
      }
    },
    {
      "hbase-policy" : {
        "properties_attributes" : { },
        "properties" : {
          "security.masterregion.protocol.acl" : "*",
          "security.admin.protocol.acl" : "*",
          "security.client.protocol.acl" : "*"
        }
      }
    },
    {
      "ranger-kafka-audit" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "capacity-scheduler" : {
        "properties_attributes" : { },
        "properties" : {
          "yarn.scheduler.capacity.root.accessible-node-labels" : "*",
          "yarn.scheduler.capacity.default.minimum-user-limit-percent" : "100",
          "yarn.scheduler.capacity.maximum-am-resource-percent" : "0.2",
          "yarn.scheduler.capacity.root.acl_administer_queue" : "*",
          "yarn.scheduler.capacity.root.default.acl_administer_jobs" : "*",
          "yarn.scheduler.capacity.resource-calculator" : "org.apache.hadoop.yarn.util.resource.DefaultResourceCalculator",
          "yarn.scheduler.capacity.root.default.capacity" : "100",
          "yarn.scheduler.capacity.root.default.user-limit-factor" : "1",
          "yarn.scheduler.capacity.root.queues" : "default",
          "yarn.scheduler.capacity.root.capacity" : "100",
          "yarn.scheduler.capacity.root.default.acl_submit_applications" : "*",
          "yarn.scheduler.capacity.root.default.maximum-capacity" : "100",
          "yarn.scheduler.capacity.node-locality-delay" : "40",
          "yarn.scheduler.capacity.maximum-applications" : "10000",
          "yarn.scheduler.capacity.root.default.state" : "RUNNING"
        }
      }
    },
    {
      "queryserver-log4j" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "\n#\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n#\n\n# Define some default values that can be overridden by system properties\npsql.root.logger=WARN,console\npsql.log.dir=.\npsql.log.file=psql.log\nhadoop.log.dir=.\n\n# Define the root logger to the system property \"plsql.root.logger\".\nlog4j.rootLogger=${psql.root.logger}\n\n# Logging Threshold to INFO for queryserver. root logger still at WARN for sqlline clients.\nlog4j.threshold=INFO\n\n#\n# Daily Rolling File Appender\n#\nlog4j.appender.DRFA=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFA.File=${psql.log.dir}/${psql.log.file}\n\n# Rollver at midnight\nlog4j.appender.DRFA.DatePattern=.yyyy-MM-dd\n\n# 30-day backup\n#log4j.appender.DRFA.MaxBackupIndex=30\nlog4j.appender.DRFA.layout=org.apache.log4j.PatternLayout\n\n# Pattern format: Date LogLevel LoggerName LogMessage\nlog4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\n\n# Debugging Pattern format\n#log4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} (%F:%M(%L)) - %m%n\n\n#\n# Null Appender\n#\nlog4j.appender.NullAppender=org.apache.log4j.varia.NullAppender\n\n#\n# console\n# Add \"console\" to rootlogger above if you want to use this\n#\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\nlog4j.appender.console.target=System.err\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{2}: %m%n\n\n# Custom Logging levels\nlog4j.logger.org.apache.zookeeper=ERROR\nlog4j.logger.org.apache.hadoop.hbase.zookeeper.RecoverableZooKeeper=ERROR\nlog4j.logger.org.apache.hadoop.hbase.zookeeper.ZKUtil=ERROR\nlog4j.logger.org.apache.hadoop.hbase.HBaseConfiguration=ERROR\n\n# query server packages\nlog4j.logger.org.apache.calcite.avatica=INFO\nlog4j.logger.org.apache.phoenix.queryserver.server=INFO\nlog4j.logger.org.eclipse.jetty.server=INFO"
        }
      }
    },
    {
      "hadoop-metrics2.properties" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "\n            # Licensed to the Apache Software Foundation (ASF) under one or more\n            # contributor license agreements. See the NOTICE file distributed with\n            # this work for additional information regarding copyright ownership.\n            # The ASF licenses this file to You under the Apache License, Version 2.0\n            # (the \"License\"); you may not use this file except in compliance with\n            # the License. You may obtain a copy of the License at\n            #\n            # http://www.apache.org/licenses/LICENSE-2.0\n            #\n            # Unless required by applicable law or agreed to in writing, software\n            # distributed under the License is distributed on an \"AS IS\" BASIS,\n            # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n            # See the License for the specific language governing permissions and\n            # limitations under the License.\n\n            # syntax: [prefix].[source|sink|jmx].[instance].[options]\n            # See package.html for org.apache.hadoop.metrics2 for details\n\n            {% if has_ganglia_server %}\n            *.period=60\n\n            *.sink.ganglia.class=org.apache.hadoop.metrics2.sink.ganglia.GangliaSink31\n            *.sink.ganglia.period=10\n\n            # default for supportsparse is false\n            *.sink.ganglia.supportsparse=true\n\n            .sink.ganglia.slope=jvm.metrics.gcCount=zero,jvm.metrics.memHeapUsedM=both\n            .sink.ganglia.dmax=jvm.metrics.threadsBlocked=70,jvm.metrics.memHeapUsedM=40\n\n            # Hook up to the server\n            namenode.sink.ganglia.servers={{ganglia_server_host}}:8661\n            datanode.sink.ganglia.servers={{ganglia_server_host}}:8659\n            jobtracker.sink.ganglia.servers={{ganglia_server_host}}:8662\n            tasktracker.sink.ganglia.servers={{ganglia_server_host}}:8658\n            maptask.sink.ganglia.servers={{ganglia_server_host}}:8660\n            reducetask.sink.ganglia.servers={{ganglia_server_host}}:8660\n            resourcemanager.sink.ganglia.servers={{ganglia_server_host}}:8664\n            nodemanager.sink.ganglia.servers={{ganglia_server_host}}:8657\n            historyserver.sink.ganglia.servers={{ganglia_server_host}}:8666\n            journalnode.sink.ganglia.servers={{ganglia_server_host}}:8654\n            nimbus.sink.ganglia.servers={{ganglia_server_host}}:8649\n            supervisor.sink.ganglia.servers={{ganglia_server_host}}:8650\n\n            resourcemanager.sink.ganglia.tagsForPrefix.yarn=Queue\n\n            {% endif %}\n\n            {% if has_metric_collector %}\n\n            *.period={{metrics_collection_period}}\n            *.sink.timeline.plugin.urls=file:///usr/ndp/current/ambari_metrics_hadoop_sink/hadoop-sink/ambari-metrics-hadoop-sink.jar\n            *.sink.timeline.class=org.apache.hadoop.metrics2.sink.timeline.HadoopTimelineMetricsSink\n            *.sink.timeline.period={{metrics_collection_period}}\n            *.sink.timeline.sendInterval={{metrics_report_interval}}000\n            *.sink.timeline.slave.host.name={{hostname}}\n            *.sink.timeline.zookeeper.quorum={{zookeeper_quorum}}\n            *.sink.timeline.protocol={{metric_collector_protocol}}\n            *.sink.timeline.port={{metric_collector_port}}\n            *.sink.timeline.host_in_memory_aggregation = {{host_in_memory_aggregation}}\n            *.sink.timeline.host_in_memory_aggregation_port = {{host_in_memory_aggregation_port}}\n\n            # HTTPS properties\n            *.sink.timeline.truststore.path = {{metric_truststore_path}}\n            *.sink.timeline.truststore.type = {{metric_truststore_type}}\n            *.sink.timeline.truststore.password = {{metric_truststore_password}}\n\n            datanode.sink.timeline.collector.hosts={{ams_collector_hosts}}\n            namenode.sink.timeline.collector.hosts={{ams_collector_hosts}}\n            resourcemanager.sink.timeline.collector.hosts={{ams_collector_hosts}}\n            nodemanager.sink.timeline.collector.hosts={{ams_collector_hosts}}\n            jobhistoryserver.sink.timeline.collector.hosts={{ams_collector_hosts}}\n            journalnode.sink.timeline.collector.hosts={{ams_collector_hosts}}\n            maptask.sink.timeline.collector.hosts={{ams_collector_hosts}}\n            reducetask.sink.timeline.collector.hosts={{ams_collector_hosts}}\n            applicationhistoryserver.sink.timeline.collector.hosts={{ams_collector_hosts}}\n\n            resourcemanager.sink.timeline.tagsForPrefix.yarn=Queue\n\n            {% if is_nn_client_port_configured %}\n            # Namenode rpc ports customization\n            namenode.sink.timeline.metric.rpc.client.port={{nn_rpc_client_port}}\n            {% endif %}\n            {% if is_nn_dn_port_configured %}\n            namenode.sink.timeline.metric.rpc.datanode.port={{nn_rpc_dn_port}}\n            {% endif %}\n            {% if is_nn_healthcheck_port_configured %}\n            namenode.sink.timeline.metric.rpc.healthcheck.port={{nn_rpc_healthcheck_port}}\n            {% endif %}\n\n            {% endif %}"
        }
      }
    },
    {
      "hbase-env" : {
        "properties_attributes" : { },
        "properties" : {
          "hbase_root_logger" : "INFO,RFA",
          "hbase_regionserver_xmn_max" : "512",
          "hbase_user" : "hbase",
          "hbase_data_dir" : "/srv/nbs/0/usr/ndp/data/hbase",
          "service_archive_rela_path" : "{\"DEFAULT\":\"hbase/hbase-1.2.6-bin.tar.gz\",\"PHOENIX_QUERY_SERVER\":\"phoenix/apache-phoenix-4.11.0-HBase-1.2-bin.tar.gz\",\"PHOENIX_SHARE_LIB\":\"phoenix/apache-phoenix-4.11.0-HBase-1.2-bin.tar.gz\", \"METRICS_HADOOP_SINK\":\"ambari-metrics/ambari-metrics-hadoop-sink-2.5.1.0.0.tar.gz\", \"ATLAS_HOOK_PLUGIN\":\"atlas/apache-atlas-apache-atlas-0.8.1-0.1.1-bin.tar.gz\"}",
          "hbase_master_heapsize" : "1024",
          "hbase_regionserver_xmn_ratio" : "0.2",
          "service_version" : "1.2.6",
          "content" : "\n# Set environment variables here.\n\n# The java implementation to use. Java 1.6 required.\nexport JAVA_HOME={{java64_home}}\n\n# Set HADOOP_HOME to point to a specific hadoop install directory\nexport HADOOP_HOME=${HADOOP_HOME:-{{hadoop_home}}}\nexport HADOOP_CONF_DIR=${HADOOP_CONF_DIR:-{{hadoop_conf_dir}}}\n\n# HBase Configuration directory\nexport HBASE_CONF_DIR=${HBASE_CONF_DIR:-{{hbase_conf_dir}}}\n\n# Extra Java CLASSPATH elements. Optional.\n{% if has_atlas %}\nexport HBASE_CLASSPATH=${HBASE_CLASSPATH}:{{atlas_hook_home_dir}}/hook/hbase/*:{{atlas_hook_home_dir}}/hook/hbase/atlas-hbase-plugin-impl/*\n{% else %}\nexport HBASE_CLASSPATH=${HBASE_CLASSPATH}\n{% endif %}\n\n\n# The maximum amount of heap to use, in MB. Default is 1000.\n# export HBASE_HEAPSIZE=1000\n\n# Extra Java runtime options.\n# Below are what we set by default. May only work with SUN JVM.\n# For more on why as well as other possible settings,\n# see http://wiki.apache.org/hadoop/PerformanceTuning\nexport SERVER_GC_OPTS=\"-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:{{log_dir}}/gc.log-`date +'%Y%m%d%H%M'`\"\n# Uncomment below to enable java garbage collection logging.\n# export HBASE_OPTS=\"$HBASE_OPTS -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:$HBASE_HOME/logs/gc-hbase.log\"\n\n# Uncomment and adjust to enable JMX exporting\n# See jmxremote.password and jmxremote.access in $JRE_HOME/lib/management to configure remote password access.\n# More details at: http://java.sun.com/javase/6/docs/technotes/guides/management/agent.html\n#\n# export HBASE_JMX_BASE=\"-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\"\n# If you want to configure BucketCache, specify '-XX: MaxDirectMemorySize=' with proper direct memory size\n# export HBASE_THRIFT_OPTS=\"$HBASE_JMX_BASE -Dcom.sun.management.jmxremote.port=10103\"\n# export HBASE_ZOOKEEPER_OPTS=\"$HBASE_JMX_BASE -Dcom.sun.management.jmxremote.port=10104\"\n\n# File naming hosts on which HRegionServers will run. $HBASE_HOME/conf/regionservers by default.\nexport HBASE_REGIONSERVERS=${HBASE_CONF_DIR}/regionservers\n\n# Extra ssh options. Empty by default.\n# export HBASE_SSH_OPTS=\"-o ConnectTimeout=1 -o SendEnv=HBASE_CONF_DIR\"\n\n# Where log files are stored. $HBASE_HOME/logs by default.\nexport HBASE_LOG_DIR={{log_dir}}\nexport HBASE_ROOT_LOGGER=${HBASE_ROOT_LOGGER:-{{hbase_root_logger}}}\n{% if is_hbase_client %}\nexport HBASE_LOGFILE=${HBASE_LOGFILE:-hbase-$USER.log}\n{% endif %}\n\n# A string representing this instance of hbase. $USER by default.\n# export HBASE_IDENT_STRING=$USER\n\n# The scheduling priority for daemon processes. See 'man nice'.\n# export HBASE_NICENESS=10\n\n# The directory where pid files are stored. /tmp by default.\nexport HBASE_PID_DIR={{pid_dir}}\n\n# Seconds to sleep between slave commands. Unset by default. This\n# can be useful in large clusters, where, e.g., slave rsyncs can\n# otherwise arrive faster than the master can service them.\n# export HBASE_SLAVE_SLEEP=0.1\n\n# Tell HBase whether it should manage it's own instance of Zookeeper or not.\nexport HBASE_MANAGES_ZK=false\n\n{% if java_version < 8 %}\nJDK_DEPENDED_OPTS=\"-XX:PermSize=128m -XX:MaxPermSize=128m\"\n{% endif %}\n\n{% if security_enabled %}\n{% if component_directory == 'hbase_client' %}\nexport HBASE_OPTS=\"$HBASE_OPTS -Djava.security.auth.login.config={{client_jaas_config_file}}\"\n{% endif %}\nexport HBASE_OPTS=\"$HBASE_OPTS -XX:+UseConcMarkSweepGC -XX:ErrorFile={{log_dir}}/hs_err_pid%p.log -Djava.io.tmpdir={{java_io_tmpdir}}\"\nexport HBASE_MASTER_OPTS=\"$HBASE_MASTER_OPTS -Xmx{{master_heapsize}} -Djava.security.auth.login.config={{master_jaas_config_file}} $JDK_DEPENDED_OPTS\"\nexport HBASE_REGIONSERVER_OPTS=\"$HBASE_REGIONSERVER_OPTS -Xmn{{regionserver_xmn_size}} -XX:CMSInitiatingOccupancyFraction=70  -Xms{{regionserver_heapsize}} -Xmx{{regionserver_heapsize}} -Djava.security.auth.login.config={{regionserver_jaas_config_file}} $JDK_DEPENDED_OPTS\"\nexport PHOENIX_QUERYSERVER_OPTS=\"$PHOENIX_QUERYSERVER_OPTS -Djava.security.auth.login.config={{queryserver_jaas_config_file}}\"\n{% else %}\nexport HBASE_OPTS=\"$HBASE_OPTS -XX:+UseConcMarkSweepGC -XX:ErrorFile={{log_dir}}/hs_err_pid%p.log -Djava.io.tmpdir={{java_io_tmpdir}}\"\nexport HBASE_MASTER_OPTS=\"$HBASE_MASTER_OPTS -Xmx{{master_heapsize}} $JDK_DEPENDED_OPTS\"\nexport HBASE_REGIONSERVER_OPTS=\"$HBASE_REGIONSERVER_OPTS -Xmn{{regionserver_xmn_size}} -XX:CMSInitiatingOccupancyFraction=70  -Xms{{regionserver_heapsize}} -Xmx{{regionserver_heapsize}} $JDK_DEPENDED_OPTS\"\n{% endif %}\n\n# HBase off-heap MaxDirectMemorySize\nexport HBASE_REGIONSERVER_OPTS=\"$HBASE_REGIONSERVER_OPTS {% if hbase_max_direct_memory_size %} -XX:MaxDirectMemorySize={{hbase_max_direct_memory_size}}m {% endif %}\"\nexport HBASE_MASTER_OPTS=\"$HBASE_MASTER_OPTS {% if hbase_max_direct_memory_size %} -XX:MaxDirectMemorySize={{hbase_max_direct_memory_size}}m {% endif %}\"",
          "hbase_java_io_tmpdir" : "/srv/nbs/0/usr/ndp/data/hbase/tmp",
          "hbase_user_nproc_limit" : "16000",
          "service_archive_root_dir" : "{\"DEFAULT\":\"hbase-1.2.6\",\"PHOENIX_QUERY_SERVER\":\"apache-phoenix-4.11.0-HBase-1.2-bin\",\"PHOENIX_SHARE_LIB\":\"apache-phoenix-4.11.0-HBase-1.2-bin\", \"METRICS_HADOOP_SINK\":\"ambari-metrics-hadoop-sink-2.5.1.0.0\", \"ATLAS_HOOK_PLUGIN\":\"apache-atlas-apache-atlas-0.8.1-0.1.1\"}",
          "hbase_pid_dir" : "/var/run/hbase",
          "hbase_regionserver_shutdown_timeout" : "30",
          "hbase_log_dir" : "/var/log/hbase",
          "hbase_regionserver_heapsize" : "8192",
          "hbase_user_nofile_limit" : "32000",
          "phoenix_sql_enabled" : "false",
          "server_role_directory_map" : "{\"HBASE_MASTER\":\"hbase_master\",\"HBASE_REGIONSERVER\":\"hbase_regionserver\",\"HBASE_CLIENT\":\"hbase_client\",\"PHOENIX_QUERY_SERVER\":\"phoenix_query_server\",\"PHOENIX_SHARE_LIB\":\"phoenix_share_lib\", \"METRICS_HADOOP_SINK\":\"ambari_metrics_hadoop_sink\", \"ATLAS_HOOK_PLUGIN\":\"atlas_hook_plugin\"}"
        }
      }
    },
    {
      "spark2-log4j-properties" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "\n# Set everything to be logged to the console\nlog4j.rootCategory=INFO, console\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\nlog4j.appender.console.target=System.err\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n\n\n# Settings to quiet third party logs that are too verbose\nlog4j.logger.org.eclipse.jetty=WARN\nlog4j.logger.org.eclipse.jetty.util.component.AbstractLifeCycle=ERROR\nlog4j.logger.org.apache.spark.repl.SparkIMain$exprTyper=INFO\nlog4j.logger.org.apache.spark.repl.SparkILoop$SparkILoopInterpreter=INFO"
        }
      }
    },
    {
      "ams-site" : {
        "properties_attributes" : { },
        "properties" : {
          "timeline.metrics.cluster.aggregator.hourly.interval" : "3600",
          "timeline.metrics.cluster.aggregator.minute.checkpointCutOffMultiplier" : "2",
          "timeline.metrics.cluster.aggregator.daily.checkpointCutOffMultiplier" : "2",
          "timeline.metrics.host.aggregator.hourly.interval" : "3600",
          "timeline.metrics.aggregators.skip.blockcache.enabled" : "false",
          "timeline.metrics.service.rpc.address" : "0.0.0.0:60200",
          "timeline.metrics.aggregator.checkpoint.dir" : "/var/lib/ambari-metrics-collector/checkpoint",
          "failover.strategy" : "round-robin",
          "timeline.metrics.cluster.aggregator.second.checkpointCutOffMultiplier" : "2",
          "timeline.metrics.service.http.policy" : "HTTP_ONLY",
          "timeline.metrics.downsampler.topn.value" : "10",
          "timeline.metrics.host.aggregator.minute.checkpointCutOffMultiplier" : "2",
          "timeline.metrics.service.watcher.timeout" : "30",
          "timeline.metrics.service.checkpointDelay" : "60",
          "timeline.metrics.cluster.aggregator.second.interval" : "120",
          "timeline.metrics.service.webapp.address" : "0.0.0.0:6188",
          "timeline.metrics.host.aggregator.daily.ttl" : "31536000",
          "timeline.metrics.service.watcher.delay" : "30",
          "timeline.metrics.service.watcher.disabled" : "true",
          "timeline.metrics.hbase.init.check.enabled" : "false",
          "timeline.metrics.host.aggregator.hourly.disabled" : "false",
          "timeline.metrics.service.cluster.aggregator.appIds" : "datanode,nodemanager,hbase",
          "timeline.metrics.cluster.aggregator.hourly.checkpointCutOffMultiplier" : "2",
          "timeline.metrics.host.aggregator.daily.checkpointCutOffMultiplier" : "2",
          "timeline.metrics.service.resultset.fetchSize" : "2000",
          "timeline.metrics.cluster.aggregator.hourly.ttl" : "31536000",
          "timeline.metrics.hbase.aggregate.table.compaction.policy.class" : "org.apache.hadoop.hbase.regionserver.compactions.ExploringCompactionPolicy",
          "cluster.zookeeper.quorum" : "{{cluster_zookeeper_quorum_hosts}}",
          "timeline.metrics.downsampler.topn.function" : "max",
          "timeline.metrics.host.aggregator.ttl" : "86400",
          "phoenix.spool.directory" : "/tmp/ams-hbase/phoenix-spool",
          "timeline.metrics.host.aggregate.splitpoints" : "kafka.network.RequestMetrics.ResponseQueueTimeMs.request.OffsetFetch.98percentile",
          "timeline.metrics.service.handler.thread.count" : "20",
          "timeline.metrics.cache.size" : "150",
          "timeline.metrics.cluster.aggregator.minute.interval" : "300",
          "timeline.metrics.cluster.aggregator.minute.ttl" : "2592000",
          "timeline.metrics.host.aggregator.minute.interval" : "300",
          "timeline.metrics.cluster.aggregator.interpolation.enabled" : "true",
          "timeline.metrics.cache.commit.interval" : "3",
          "timeline.metrics.host.aggregator.minute.disabled" : "false",
          "timeline.metrics.service.metadata.filters" : "ContainerResource",
          "timeline.metrics.cache.enabled" : "true",
          "timeline.metrics.cluster.aggregate.splitpoints" : "kafka.network.RequestMetrics.ResponseQueueTimeMs.request.OffsetFetch.98percentile",
          "timeline.metrics.cluster.aggregator.minute.disabled" : "false",
          "timeline.metrics.service.use.groupBy.aggregators" : "true",
          "phoenix.query.maxGlobalMemoryPercentage" : "25",
          "timeline.metrics.hbase.aggregate.table.compaction.policy.key" : "hbase.hstore.defaultengine.compactionpolicy.class",
          "timeline.metrics.service.default.result.limit" : "15840",
          "timeline.metrics.hbase.compression.scheme" : "SNAPPY",
          "timeline.metrics.cluster.aggregator.daily.ttl" : "63072000",
          "cluster.zookeeper.property.clientPort" : "{{cluster_zookeeper_clientPort}}",
          "timeline.metrics.aggregate.table.hbase.hstore.blockingStoreFiles" : "1000",
          "timeline.metrics.sink.report.interval" : "60",
          "timeline.metrics.cluster.aggregator.second.timeslice.interval" : "30",
          "timeline.metrics.cluster.aggregation.sql.filters" : "sdisk\\_%,boottime",
          "timeline.metrics.downsampler.topn.metric.patterns" : "\n      dfs.NNTopUserOpCounts.windowMs=60000.op=__%.user=%,dfs.NNTopUserOpCounts.windowMs=300000.op=__%.user=%,dfs.NNTopUserOpCounts.windowMs=1500000.op=__%.user=%",
          "timeline.metrics.host.aggregator.hourly.ttl" : "2592000",
          "timeline.metrics.cluster.aggregator.daily.interval" : "86400",
          "timeline.metrics.host.aggregator.daily.disabled" : "false",
          "timeline.metrics.cluster.aggregator.daily.disabled" : "false",
          "timeline.metrics.cluster.aggregator.hourly.disabled" : "false",
          "timeline.metrics.service.watcher.initial.delay" : "600",
          "timeline.metrics.host.aggregator.minute.ttl" : "604800",
          "timeline.metrics.hbase.data.block.encoding" : "FAST_DIFF",
          "timeline.metrics.cluster.aggregator.second.disabled" : "false",
          "timeline.metrics.sink.collection.period" : "10",
          "timeline.metrics.host.aggregator.hourly.checkpointCutOffMultiplier" : "2",
          "timeline.metrics.daily.aggregator.minute.interval" : "86400",
          "timeline.metrics.cluster.aggregator.second.ttl" : "259200"
        }
      }
    },
    {
      "mapred-site" : {
        "properties_attributes" : { },
        "properties" : {
          "mapreduce.map.speculative" : "false",
          "mapreduce.jobhistory.recovery.store.class" : "org.apache.hadoop.mapreduce.v2.hs.HistoryServerLeveldbStateStoreService",
          "mapreduce.job.counters.max" : "130",
          "mapreduce.reduce.log.level" : "INFO",
          "mapreduce.shuffle.port" : "13562",
          "yarn.app.mapreduce.am.admin-command-opts" : "-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhadoop.metrics.log.level=WARN",
          "mapreduce.job.emit-timeline-data" : "false",
          "mapreduce.jobhistory.recovery.enable" : "true",
          "mapreduce.map.log.level" : "INFO",
          "yarn.app.mapreduce.am.staging-dir" : "/tmp/hadoop-yarn/staging",
          "mapreduce.reduce.shuffle.merge.percent" : "0.66",
          "mapreduce.output.fileoutputformat.compress" : "false",
          "mapreduce.admin.map.child.java.opts" : "-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhadoop.metrics.log.level=WARN",
          "mapreduce.job.reduce.slowstart.completedmaps" : "0.05",
          "mapreduce.jobhistory.http.policy" : "HTTP_ONLY",
          "mapreduce.job.queuename" : "default",
          "mapreduce.application.framework.path" : "",
          "mapreduce.application.classpath" : "",
          "mapred.map.output.compression.codec" : "com.hadoop.compression.lzo.LzoCodec",
          "mapreduce.reduce.java.opts" : "-Xmx6553m",
          "mapreduce.map.output.compress" : "false",
          "mapreduce.reduce.input.buffer.percent" : "0.0",
          "mapreduce.jobhistory.intermediate-done-dir" : "/mr-history/tmp",
          "yarn.app.mapreduce.am.log.level" : "INFO",
          "mapreduce.reduce.shuffle.fetch.retry.interval-ms" : "1000",
          "mapreduce.reduce.shuffle.input.buffer.percent" : "0.7",
          "mapreduce.reduce.speculative" : "false",
          "mapred.compress.map.output" : "true",
          "mapreduce.output.fileoutputformat.compress.type" : "BLOCK",
          "mapreduce.task.io.sort.mb" : "2047",
          "mapreduce.cluster.administrators" : " hadoop",
          "mapreduce.reduce.shuffle.fetch.retry.timeout-ms" : "30000",
          "mapreduce.jobhistory.address" : "%HOSTGROUP::host_group_2%:10020",
          "mapreduce.map.sort.spill.percent" : "0.7",
          "mapreduce.map.memory.mb" : "4096",
          "mapreduce.admin.reduce.child.java.opts" : "-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhadoop.metrics.log.level=WARN",
          "mapreduce.jobhistory.bind-host" : "0.0.0.0",
          "mapreduce.task.timeout" : "300000",
          "mapreduce.admin.user.env" : "LD_LIBRARY_PATH={{component_lib_home}}/native:{{component_lib_home}}/native/Linux-amd64-64",
          "mapreduce.am.max-attempts" : "2",
          "mapreduce.reduce.memory.mb" : "8192",
          "mapreduce.framework.name" : "yarn",
          "mapreduce.reduce.shuffle.parallelcopies" : "30",
          "mapreduce.jobhistory.done-dir" : "/mr-history/done",
          "mapreduce.jobhistory.webapp.address" : "%HOSTGROUP::host_group_2%:19888",
          "mapreduce.reduce.shuffle.fetch.retry.enabled" : "1",
          "mapreduce.task.io.sort.factor" : "100",
          "mapreduce.jobhistory.recovery.store.leveldb.path" : "/hadoop/mapreduce/jhs",
          "yarn.app.mapreduce.am.command-opts" : "-Xmx3276m",
          "mapreduce.map.java.opts" : "-Xmx3276m",
          "yarn.app.mapreduce.am.resource.mb" : "4096"
        }
      }
    },
    {
      "ranger-spark2-policymgr-ssl" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "ranger-kafka-policymgr-ssl" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "spark2-metrics-properties" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "\n# syntax: [instance].sink|source.[name].[options]=[value]\n\n# This file configures Spark's internal metrics system. The metrics system is\n# divided into instances which correspond to internal components.\n# Each instance can be configured to report its metrics to one or more sinks.\n# Accepted values for [instance] are \"master\", \"worker\", \"executor\", \"driver\",\n# and \"applications\". A wild card \"*\" can be used as an instance name, in\n# which case all instances will inherit the supplied property.\n#\n# Within an instance, a \"source\" specifies a particular set of grouped metrics.\n# there are two kinds of sources:\n# 1. Spark internal sources, like MasterSource, WorkerSource, etc, which will\n# collect a Spark component's internal state. Each instance is paired with a\n# Spark source that is added automatically.\n# 2. Common sources, like JvmSource, which will collect low level state.\n# These can be added through configuration options and are then loaded\n# using reflection.\n#\n# A \"sink\" specifies where metrics are delivered to. Each instance can be\n# assigned one or more sinks.\n#\n# The sink|source field specifies whether the property relates to a sink or\n# source.\n#\n# The [name] field specifies the name of source or sink.\n#\n# The [options] field is the specific property of this source or sink. The\n# source or sink is responsible for parsing this property.\n#\n# Notes:\n# 1. To add a new sink, set the \"class\" option to a fully qualified class\n# name (see examples below).\n# 2. Some sinks involve a polling period. The minimum allowed polling period\n# is 1 second.\n# 3. Wild card properties can be overridden by more specific properties.\n# For example, master.sink.console.period takes precedence over\n# *.sink.console.period.\n# 4. A metrics specific configuration\n# \"spark.metrics.conf=${SPARK_HOME}/conf/metrics.properties\" should be\n# added to Java properties using -Dspark.metrics.conf=xxx if you want to\n# customize metrics system. You can also put the file in ${SPARK_HOME}/conf\n# and it will be loaded automatically.\n# 5. MetricsServlet is added by default as a sink in master, worker and client\n# driver, you can send http request \"/metrics/json\" to get a snapshot of all the\n# registered metrics in json format. For master, requests \"/metrics/master/json\" and\n# \"/metrics/applications/json\" can be sent seperately to get metrics snapshot of\n# instance master and applications. MetricsServlet may not be configured by self.\n#\n\n## List of available sinks and their properties.\n\n# org.apache.spark.metrics.sink.ConsoleSink\n# Name: Default: Description:\n# period 10 Poll period\n# unit seconds Units of poll period\n\n# org.apache.spark.metrics.sink.CSVSink\n# Name: Default: Description:\n# period 10 Poll period\n# unit seconds Units of poll period\n# directory /tmp Where to store CSV files\n\n# org.apache.spark.metrics.sink.GangliaSink\n# Name: Default: Description:\n# host NONE Hostname or multicast group of Ganglia server\n# port NONE Port of Ganglia server(s)\n# period 10 Poll period\n# unit seconds Units of poll period\n# ttl 1 TTL of messages sent by Ganglia\n# mode multicast Ganglia network mode ('unicast' or 'multicast')\n\n# org.apache.spark.metrics.sink.JmxSink\n\n# org.apache.spark.metrics.sink.MetricsServlet\n# Name: Default: Description:\n# path VARIES* Path prefix from the web server root\n# sample false Whether to show entire set of samples for histograms ('false' or 'true')\n#\n# * Default path is /metrics/json for all instances except the master. The master has two paths:\n# /metrics/aplications/json # App information\n# /metrics/master/json # Master information\n\n# org.apache.spark.metrics.sink.GraphiteSink\n# Name: Default: Description:\n# host NONE Hostname of Graphite server\n# port NONE Port of Graphite server\n# period 10 Poll period\n# unit seconds Units of poll period\n# prefix EMPTY STRING Prefix to prepend to metric name\n\n## Examples\n# Enable JmxSink for all instances by class name\n#*.sink.jmx.class=org.apache.spark.metrics.sink.JmxSink\n\n# Enable ConsoleSink for all instances by class name\n#*.sink.console.class=org.apache.spark.metrics.sink.ConsoleSink\n\n# Polling period for ConsoleSink\n#*.sink.console.period=10\n\n#*.sink.console.unit=seconds\n\n# Master instance overlap polling period\n#master.sink.console.period=15\n\n#master.sink.console.unit=seconds\n\n# Enable CsvSink for all instances\n#*.sink.csv.class=org.apache.spark.metrics.sink.CsvSink\n\n# Polling period for CsvSink\n#*.sink.csv.period=1\n\n#*.sink.csv.unit=minutes\n\n# Polling directory for CsvSink\n#*.sink.csv.directory=/tmp/\n\n# Worker instance overlap polling period\n#worker.sink.csv.period=10\n\n#worker.sink.csv.unit=minutes\n\n# Enable jvm source for instance master, worker, driver and executor\n#master.source.jvm.class=org.apache.spark.metrics.source.JvmSource\n\n#worker.source.jvm.class=org.apache.spark.metrics.source.JvmSource\n\n#driver.source.jvm.class=org.apache.spark.metrics.source.JvmSource\n\n#executor.source.jvm.class=org.apache.spark.metrics.source.JvmSource"
        }
      }
    },
    {
      "spark2-thrift-sparkconf" : {
        "properties_attributes" : {
          "final" : {
            "spark.eventLog.dir" : "true",
            "spark.eventLog.enabled" : "true",
            "spark.history.fs.logDirectory" : "true"
          }
        },
        "properties" : {
          "spark.yarn.am.memory" : "1g",
          "spark.driver.maxResultSize" : "1g",
          "spark.hadoop.fs.file.impl.disable.cache" : "true",
          "spark.history.retainedApplications" : "25",
          "spark.hadoop.hive.server2.thrift.min.worker.threads" : "20",
          "spark.scheduler.allocation.file" : "{{spark_conf}}/spark-thrift-fairscheduler.xml",
          "spark.history.fs.cleaner.interval" : "1h",
          "spark.sql.proxy.users" : "spark",
          "spark.history.fs.cleaner.enabled" : "true",
          "spark.history.fs.numReplayThreads" : "20",
          "spark.history.fs.cleaner.maxAge" : "7d",
          "spark.eventLog.dir" : "{{spark_history_dir}}",
          "spark.serializer" : "org.apache.spark.serializer.KryoSerializer",
          "spark.dynamicAllocation.minExecutors" : "1",
          "spark.yarn.historyServer.address" : "host_group_3:18081",
          "spark.dynamicAllocation.initialExecutors" : "1",
          "spark.executor.instances" : "2",
          "spark.yarn.executor.memoryOverhead" : "512",
          "spark.dynamicAllocation.executorIdleTimeout" : "60s",
          "spark.history.fs.logDirectory" : "{{spark_history_dir}}",
          "spark.yarn.queue" : "default",
          "spark.history.ui.maxApplications" : "800",
          "spark.sql.warehouse.dir" : "/user/spark/warehouse",
          "spark.executor.memory" : "1g",
          "spark.driver.memory" : "1g",
          "spark.kryoserializer.buffer.max" : "128m",
          "spark.master" : "yarn",
          "spark.sql.runSQLOnFiles" : "false",
          "spark.yarn.am.memoryOverhead" : "512",
          "spark.yarn.am.cores" : "1",
          "spark.executor.cores" : "1",
          "spark.submit.deployMode" : "client",
          "spark.hadoop.hive.server2.thrift.port" : "10016",
          "spark.dynamicAllocation.maxExecutors" : "20",
          "spark.yarn.am.extraJavaOptions" : "-XX:PermSize=128m -XX:MaxPermSize=128m -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution",
          "spark.yarn.am.waitTime" : "100s",
          "spark.eventLog.compress" : "true",
          "spark.hadoop.fs.hdfs.impl.disable.cache" : "true",
          "spark.sql.autoBroadcastJoinThreshold" : "104857600",
          "spark.scheduler.mode" : "FAIR",
          "spark.eventLog.enabled" : "true",
          "spark.shuffle.service.enabled" : "false",
          "spark.executor.extraJavaOptions" : "-XX:PermSize=128m -XX:MaxPermSize=128m -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution",
          "spark.history.fs.update.interval" : "100s",
          "spark.sql.queue.spark" : "default",
          "spark.dynamicAllocation.enabled" : "false"
        }
      }
    },
    {
      "ranger-hbase-policymgr-ssl" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "hdfs-log4j" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#  http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\n\n# Define some default values that can be overridden by system properties\n# To change daemon root logger use hadoop_root_logger in hadoop-env\nhadoop.root.logger=INFO,console\nhadoop.log.dir=.\nhadoop.log.file=hadoop.log\n\n\n# Define the root logger to the system property \"hadoop.root.logger\".\nlog4j.rootLogger=${hadoop.root.logger}, EventCounter\n\n# Logging Threshold\nlog4j.threshhold=ALL\n\n#\n# Daily Rolling File Appender\n#\n\nlog4j.appender.DRFA=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFA.File=${hadoop.log.dir}/${hadoop.log.file}\n\n# Rollver at midnight\nlog4j.appender.DRFA.DatePattern=.yyyy-MM-dd\n\n# 30-day backup\n#log4j.appender.DRFA.MaxBackupIndex=30\nlog4j.appender.DRFA.layout=org.apache.log4j.PatternLayout\n\n# Pattern format: Date LogLevel LoggerName LogMessage\nlog4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\n# Debugging Pattern format\n#log4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} (%F:%M(%L)) - %m%n\n\n\n#\n# console\n# Add \"console\" to rootlogger above if you want to use this\n#\n\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\nlog4j.appender.console.target=System.err\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{2}: %m%n\n\n#\n# TaskLog Appender\n#\n\n#Default values\nhadoop.tasklog.taskid=null\nhadoop.tasklog.iscleanup=false\nhadoop.tasklog.noKeepSplits=4\nhadoop.tasklog.totalLogFileSize=100\nhadoop.tasklog.purgeLogSplits=true\nhadoop.tasklog.logsRetainHours=12\n\nlog4j.appender.TLA=org.apache.hadoop.mapred.TaskLogAppender\nlog4j.appender.TLA.taskId=${hadoop.tasklog.taskid}\nlog4j.appender.TLA.isCleanup=${hadoop.tasklog.iscleanup}\nlog4j.appender.TLA.totalLogFileSize=${hadoop.tasklog.totalLogFileSize}\n\nlog4j.appender.TLA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.TLA.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\n\n#\n#Security audit appender\n#\nhadoop.security.logger=INFO,console\nhadoop.security.log.maxfilesize=256MB\nhadoop.security.log.maxbackupindex=20\nlog4j.category.SecurityLogger=${hadoop.security.logger}\nhadoop.security.log.file=SecurityAuth.audit\nlog4j.appender.DRFAS=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFAS.File=${hadoop.log.dir}/${hadoop.security.log.file}\nlog4j.appender.DRFAS.layout=org.apache.log4j.PatternLayout\nlog4j.appender.DRFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\nlog4j.appender.DRFAS.DatePattern=.yyyy-MM-dd\n\nlog4j.appender.RFAS=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFAS.File=${hadoop.log.dir}/${hadoop.security.log.file}\nlog4j.appender.RFAS.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFAS.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\nlog4j.appender.RFAS.MaxFileSize=${hadoop.security.log.maxfilesize}\nlog4j.appender.RFAS.MaxBackupIndex=${hadoop.security.log.maxbackupindex}\n\n#\n# hdfs audit logging\n#\nhdfs.audit.logger=INFO,console\nlog4j.logger.org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit=${hdfs.audit.logger}\nlog4j.additivity.org.apache.hadoop.hdfs.server.namenode.FSNamesystem.audit=false\nlog4j.appender.DRFAAUDIT=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DRFAAUDIT.File=${hadoop.log.dir}/hdfs-audit.log\nlog4j.appender.DRFAAUDIT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.DRFAAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.DRFAAUDIT.DatePattern=.yyyy-MM-dd\n\n#\n# NameNode metrics logging.\n# The default is to retain two namenode-metrics.log files up to 64MB each.\n#\nnamenode.metrics.logger=INFO,NullAppender\nlog4j.logger.NameNodeMetricsLog=${namenode.metrics.logger}\nlog4j.additivity.NameNodeMetricsLog=false\nlog4j.appender.NNMETRICSRFA=org.apache.log4j.RollingFileAppender\nlog4j.appender.NNMETRICSRFA.File=${hadoop.log.dir}/namenode-metrics.log\nlog4j.appender.NNMETRICSRFA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.NNMETRICSRFA.layout.ConversionPattern=%d{ISO8601} %m%n\nlog4j.appender.NNMETRICSRFA.MaxBackupIndex=1\nlog4j.appender.NNMETRICSRFA.MaxFileSize=64MB\n\n#\n# mapred audit logging\n#\nmapred.audit.logger=INFO,console\nlog4j.logger.org.apache.hadoop.mapred.AuditLogger=${mapred.audit.logger}\nlog4j.additivity.org.apache.hadoop.mapred.AuditLogger=false\nlog4j.appender.MRAUDIT=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.MRAUDIT.File=${hadoop.log.dir}/mapred-audit.log\nlog4j.appender.MRAUDIT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.MRAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.MRAUDIT.DatePattern=.yyyy-MM-dd\n\n#\n# Rolling File Appender\n#\n\nlog4j.appender.RFA=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFA.File=${hadoop.log.dir}/${hadoop.log.file}\n\n# Logfile size and and 30-day backups\nlog4j.appender.RFA.MaxFileSize=256MB\nlog4j.appender.RFA.MaxBackupIndex=10\n\nlog4j.appender.RFA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} - %m%n\nlog4j.appender.RFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2} (%F:%M(%L)) - %m%n\n\n\n# Custom Logging levels\n\nhadoop.metrics.log.level=INFO\n#log4j.logger.org.apache.hadoop.mapred.JobTracker=DEBUG\n#log4j.logger.org.apache.hadoop.mapred.TaskTracker=DEBUG\n#log4j.logger.org.apache.hadoop.fs.FSNamesystem=DEBUG\nlog4j.logger.org.apache.hadoop.metrics2=${hadoop.metrics.log.level}\n\n# Jets3t library\nlog4j.logger.org.jets3t.service.impl.rest.httpclient.RestS3Service=ERROR\n\n#\n# Null Appender\n# Trap security logger on the hadoop client side\n#\nlog4j.appender.NullAppender=org.apache.log4j.varia.NullAppender\n\n#\n# Event Counter Appender\n# Sends counts of logging messages at different severity levels to Hadoop Metrics.\n#\nlog4j.appender.EventCounter=org.apache.hadoop.log.metrics.EventCounter\n\n# Removes \"deprecated\" messages\nlog4j.logger.org.apache.hadoop.conf.Configuration.deprecation=WARN\n\n#\n# HDFS block state change log from block manager\n#\n# Uncomment the following to suppress normal block state change\n# messages from BlockManager in NameNode.\n#log4j.logger.BlockStateChange=WARN"
        }
      }
    },
    {
      "hive-site" : {
        "properties_attributes" : {
          "hidden" : {
            "javax.jdo.option.ConnectionPassword" : "HIVE_CLIENT,CONFIG_DOWNLOAD"
          }
        },
        "properties" : {
          "hive.default.fileformat" : "TextFile",
          "hive.metastore.pre.event.listeners" : "org.apache.hadoop.hive.ql.security.authorization.AuthorizationPreEventListener",
          "hive.optimize.reducededuplication" : "true",
          "hive.security.authenticator.manager" : "org.apache.hadoop.hive.ql.security.ProxyUserAuthenticator",
          "javax.jdo.option.ConnectionDriverName" : "com.mysql.jdbc.Driver",
          "hive.metastore.sasl.enabled" : "false",
          "hive.vectorized.execution.enabled" : "true",
          "hive.security.authorization.manager" : "org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdConfOnlyAuthorizerFactory",
          "hive.session.history.query.enabled" : "true",
          "hive.auto.convert.join.noconditionaltask" : "false",
          "hive.exec.stagingdir" : "/hive-staging/.hive-staging",
          "hive.server2.authentication" : "NONE",
          "hive.metastore.cache.pinobjtypes" : "Table,Database,Type,FieldSchema,Order",
          "hive.support.sql11.reserved.keywords" : "false",
          "hive.map.aggr" : "true",
          "hive.server2.async.exec.wait.queue.size" : "500",
          "hive.metastore.warehouse.dir" : "/user/warehouse",
          "hive.server2.async.exec.threads" : "100",
          "hive.metastore.schema.verification" : "false",
          "hive.tez.container.size" : "4096",
          "hive.metastore.connect.retries" : "1",
          "hive.optimize.reducededuplication.min.reducer" : "1",
          "hive.auto.convert.join" : "false",
          "hive.server2.support.dynamic.service.discovery" : "true",
          "hive.cluster.delegation.token.store.zookeeper.connectString" : "%HOSTGROUP::host_group_1%:2181,%HOSTGROUP::host_group_2%:2181,%HOSTGROUP::host_group_3%:2181",
          "hive.metastore.uris" : "thrift://%HOSTGROUP::host_group_2%:9083",
          "hive.server2.max.start.attempts" : "5",
          "hive.server2.thrift.max.worker.threads" : "600",
          "hive.server2.use.SSL" : "false",
          "hive.tez.java.opts" : "-server -Xmx3277m -Djava.net.preferIPv4Stack=true -XX:NewRatio=8 -XX:+UseNUMA -XX:+UseParallelGC -XX:+PrintGCDetails -verbose:gc -XX:+PrintGCTimeStamps",
          "hive.querylog.location" : "/tmp",
          "hive.server2.transport.mode" : "binary",
          "hive.metastore.execute.setugi" : "true",
          "hive.zookeeper.quorum" : "%HOSTGROUP::host_group_1%:2181,%HOSTGROUP::host_group_2%:2181,%HOSTGROUP::host_group_3%:2181",
          "hive.cluster.delegation.token.store.class" : "org.apache.hadoop.hive.thrift.ZooKeeperTokenStore",
          "hive.mapjoin.bucket.cache.size" : "10000",
          "hive.server2.thrift.min.worker.threads" : "20",
          "ambari.hive.db.schema.name" : "hive",
          "hive.enforce.sorting" : "true",
          "hive.metastore.client.connect.retry.delay" : "0s",
          "hive.metastore.zookeeper.quorum" : "${hive.zookeeper.quorum}",
          "hive.security.metastore.authorization.manager" : "org.apache.hadoop.hive.ql.security.authorization.StorageBasedAuthorizationProvider",
          "datanucleus.autoCreateSchema" : "false",
          "datanucleus.fixedDatastore" : "true",
          "hive.security.authorization.enabled" : "false",
          "hive.server2.thrift.sasl.qop" : "auth",
          "hive.limit.query.max.table.partition" : "5000",
          "javax.jdo.option.ConnectionUserName" : "hive",
          "hive.optimize.bucketmapjoin" : "true",
          "hive.security.authorization.createtable.owner.grants" : "ALL",
          "hive.scratch.dir.permission" : "730",
          "hive.server2.thrift.port" : "10500",
          "hive.warehouse.subdir.inherit.perms" : "false",
          "hive.metastore.zookeeper.product.namespace" : "hive",
          "hive.optimize.bucketmapjoin.sortedmerge" : "false",
          "hive.security.metastore.authenticator.manager" : "org.apache.hadoop.hive.ql.security.HadoopDefaultMetastoreAuthenticator",
          "hive.server2.enable.doAs" : "true",
          "hive.server2.zookeeper.namespace" : "hiveserver2",
          "hive.enforce.bucketing" : "true",
          "hive.mapred.reduce.tasks.speculative.execution" : "false",
          "hive.exec.scratchdir" : "/tmp/hive/public",
          "hive.auto.convert.sortmerge.join" : "true",
          "hive.metastore.client.socket.timeout" : "60"
        }
      }
    },
    {
      "ranger-spark2-plugin-properties" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "ams-log4j" : {
        "properties_attributes" : { },
        "properties" : {
          "ams_log_number_of_backup_files" : "60",
          "ams_log_max_backup_size" : "80",
          "content" : "\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements. See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership. The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License. You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# Define some default values that can be overridden by system properties\nams.log.dir=.\nams.log.file=ambari-metrics-collector.log\n\n# Root logger option\nlog4j.rootLogger=INFO,file\n\n# Direct log messages to a log file\nlog4j.appender.file=org.apache.log4j.RollingFileAppender\nlog4j.appender.file.File=${ams.log.dir}/${ams.log.file}\nlog4j.appender.file.MaxFileSize={{ams_log_max_backup_size}}MB\nlog4j.appender.file.MaxBackupIndex={{ams_log_number_of_backup_files}}\nlog4j.appender.file.layout=org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n"
        }
      }
    },
    {
      "fair-scheduler" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<allocations>\n  <queue name=\"root\">\n    <aclSubmitApps> </aclSubmitApps>\n    <aclAdministerApps>hadoop,yarn </aclAdministerApps>\n\n    <queue name=\"default\">\n      <minResources>10240 mb, 10 vcores</minResources>\n      <maxResources>102400 mb, 100 vcores</maxResources>\n      <maxRunningApps>20</maxRunningApps>\n      <weight>1.0</weight>\n      <schedulingPolicy>fair</schedulingPolicy>\n      <aclSubmitApps>*</aclSubmitApps>\n      <aclAdministerApps>hadoop,yarn</aclAdministerApps>\n    </queue>\n  </queue>\n\n  <queuePlacementPolicy>\n    <rule name=\"specified\" create=\"false\" choiceDefaultForParentQueue=\"true\"/>\n    <rule name=\"user\" create=\"false\" choiceDefaultForParentQueue=\"true\"/>\n    <rule name=\"default\" create=\"false\"/>\n  </queuePlacementPolicy>\n</allocations>"
        }
      }
    },
    {
      "hivemetastore-site" : {
        "properties_attributes" : { },
        "properties" : {
          "hive.service.metrics.hadoop2.component" : "hivemetastore",
          "datanucleus.fixedDatastore" : "true",
          "hive.metastore.metrics.enabled" : "true",
          "hive.service.metrics.reporter" : "JSON_FILE, JMX, HADOOP2",
          "datanucleus.autoCreateSchema" : "false",
          "hive.service.metrics.file.location" : "/var/log/hive/hivemetastore-report.json"
        }
      }
    },
    {
      "ams-ssl-server" : {
        "properties_attributes" : { },
        "properties" : {
          "ssl.server.truststore.location" : "/etc/security/serverKeys/all.jks",
          "ssl.server.truststore.reload.interval" : "10000",
          "ssl.server.truststore.type" : "jks",
          "ssl.server.keystore.location" : "/etc/security/serverKeys/keystore.jks",
          "ssl.server.keystore.type" : "jks"
        }
      }
    },
    {
      "hbase-logsearch-conf" : {
        "properties_attributes" : { },
        "properties" : {
          "component_mappings" : "HBASE_MASTER:hbase_master;HBASE_REGIONSERVER:hbase_regionserver;PHOENIX_QUERY_SERVER:hbase_phoenix_server",
          "content" : "\n{\n  \"input\":[\n    {\n      \"type\":\"hbase_master\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/hbase-env/hbase_log_dir', '/var/log/hbase')}}/hbase-*-master-*.log\"\n    },\n    {\n      \"type\":\"hbase_regionserver\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/hbase-env/hbase_log_dir', '/var/log/hbase')}}/hbase-*-regionserver-*.log\"\n    },\n    {\n      \"type\":\"hbase_phoenix_server\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/hbase-env/hbase_log_dir', '/var/log/hbase')}}/phoenix-*-server.log\"\n    }\n   ],\n  \"filter\":[\n    {\n      \"filter\":\"grok\",\n      \"conditions\":{\n        \"fields\":{\n          \"type\":[\n            \"hbase_master\",\n            \"hbase_regionserver\"\n          ]\n         }\n       },\n      \"log4j_format\":\"%d{ISO8601} %-5p [%t] %c{2}: %m%n\",\n      \"multiline_pattern\":\"^(%{TIMESTAMP_ISO8601:logtime})\",\n      \"message_pattern\":\"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}%{LOGLEVEL:level}%{SPACE}\\\\[%{DATA:thread_name}\\\\]%{SPACE}%{JAVACLASS:logger_name}:%{SPACE}%{GREEDYDATA:log_message}\",\n      \"post_map_values\":{\n        \"logtime\":{\n          \"map_date\":{\n            \"target_date_pattern\":\"yyyy-MM-dd HH:mm:ss,SSS\"\n          }\n         }\n       }\n     },\n    {\n      \"filter\":\"grok\",\n      \"conditions\":{\n        \"fields\":{\n          \"type\":[\n            \"hbase_phoenix_server\"\n          ]\n         }\n      },\n      \"log4j_format\":\"%d{ISO8601} %-5p [%t] %c{2}: %m%n\",\n      \"multiline_pattern\":\"^(%{TIMESTAMP_ISO8601:logtime})\",\n      \"message_pattern\":\"(?m)^%{TIMESTAMP_ISO8601:logtime}%{SPACE}%{LOGLEVEL:level}%{SPACE}%{JAVACLASS:logger_name}:%{SPACE}%{GREEDYDATA:log_message}\",\n      \"post_map_values\":{\n        \"logtime\":{\n          \"map_date\":{\n            \"target_date_pattern\":\"yyyy-MM-dd HH:mm:ss,SSS\"\n          }\n         }\n       }\n     }\n   ]\n }",
          "service_name" : "HBase"
        }
      }
    },
    {
      "hive-exec-log4j2" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nstatus = INFO\nname = HiveExecLog4j2\npackages = org.apache.hadoop.hive.ql.log\n\n# list of properties\nproperty.hive.log.level = INFO\nproperty.hive.root.logger = FA\nproperty.hive.query.id = hadoop\nproperty.hive.log.dir = ${sys:java.io.tmpdir}/${sys:user.name}\nproperty.hive.log.file = ${sys:hive.query.id}.log\n\n# list of all appenders\nappenders = console, FA\n\n# console appender\nappender.console.type = Console\nappender.console.name = console\nappender.console.target = SYSTEM_ERR\nappender.console.layout.type = PatternLayout\nappender.console.layout.pattern = %d{ISO8601} %5p [%t] %c{2}: %m%n\n\n# simple file appender\nappender.FA.type = RandomAccessFile\nappender.FA.name = FA\nappender.FA.fileName = ${sys:hive.log.dir}/${sys:hive.log.file}\nappender.FA.layout.type = PatternLayout\nappender.FA.layout.pattern = %d{ISO8601} %5p [%t] %c{2}: %m%n\n\n# list of all loggers\nloggers = NIOServerCnxn, ClientCnxnSocketNIO, DataNucleus, Datastore, JPOX\n\nlogger.NIOServerCnxn.name = org.apache.zookeeper.server.NIOServerCnxn\nlogger.NIOServerCnxn.level = WARN\n\nlogger.ClientCnxnSocketNIO.name = org.apache.zookeeper.ClientCnxnSocketNIO\nlogger.ClientCnxnSocketNIO.level = WARN\n\nlogger.DataNucleus.name = DataNucleus\nlogger.DataNucleus.level = ERROR\n\nlogger.Datastore.name = Datastore\nlogger.Datastore.level = ERROR\n\nlogger.JPOX.name = JPOX\nlogger.JPOX.level = ERROR\n\n# root logger\nrootLogger.level = ${sys:hive.log.level}\nrootLogger.appenderRefs = root\nrootLogger.appenderRef.root.ref = ${sys:hive.root.logger}"
        }
      }
    },
    {
      "ssl-client" : {
        "properties_attributes" : { },
        "properties" : {
          "ssl.client.truststore.reload.interval" : "10000",
          "ssl.client.keystore.location" : "/etc/security/clientKeys/keystore.jks",
          "ssl.client.truststore.location" : "/etc/security/clientKeys/all.jks",
          "ssl.client.truststore.type" : "jks",
          "ssl.client.keystore.type" : "jks"
        }
      }
    },
    {
      "ams-ssl-client" : {
        "properties_attributes" : { },
        "properties" : {
          "ssl.client.truststore.location" : "/etc/security/clientKeys/all.jks",
          "ssl.client.truststore.type" : "jks",
          "ssl.client.truststore.alias" : ""
        }
      }
    },
    {
      "kafka-log4j" : {
        "properties_attributes" : { },
        "properties" : {
          "controller_log_maxbackupindex" : "20",
          "controller_log_maxfilesize" : "256",
          "kafka_log_maxfilesize" : "256",
          "content" : "\n#\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n#\n#\nkafka.logs.dir=logs\n\nlog4j.rootLogger=INFO, stdout\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.kafkaAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.kafkaAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.kafkaAppender.File=${kafka.logs.dir}/server.log\nlog4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\nlog4j.appender.kafkaAppender.MaxFileSize = {{kafka_log_maxfilesize}}MB\nlog4j.appender.kafkaAppender.MaxBackupIndex = {{kafka_log_maxbackupindex}}\n\nlog4j.appender.stateChangeAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.stateChangeAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.stateChangeAppender.File=${kafka.logs.dir}/state-change.log\nlog4j.appender.stateChangeAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stateChangeAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.requestAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.requestAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.requestAppender.File=${kafka.logs.dir}/kafka-request.log\nlog4j.appender.requestAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.requestAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.cleanerAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.cleanerAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.cleanerAppender.File=${kafka.logs.dir}/log-cleaner.log\nlog4j.appender.cleanerAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.cleanerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.controllerAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.controllerAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.controllerAppender.File=${kafka.logs.dir}/controller.log\nlog4j.appender.controllerAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.controllerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\nlog4j.appender.controllerAppender.MaxFileSize = {{controller_log_maxfilesize}}MB\nlog4j.appender.controllerAppender.MaxBackupIndex = {{controller_log_maxbackupindex}}\n# Turn on all our debugging info\n#log4j.logger.kafka.producer.async.DefaultEventHandler=DEBUG, kafkaAppender\n#log4j.logger.kafka.client.ClientUtils=DEBUG, kafkaAppender\n#log4j.logger.kafka.perf=DEBUG, kafkaAppender\n#log4j.logger.kafka.perf.ProducerPerformance$ProducerThread=DEBUG, kafkaAppender\n#log4j.logger.org.I0Itec.zkclient.ZkClient=DEBUG\nlog4j.logger.kafka=INFO, kafkaAppender\nlog4j.logger.kafka.network.RequestChannel$=WARN, requestAppender\nlog4j.additivity.kafka.network.RequestChannel$=false\n\n#log4j.logger.kafka.network.Processor=TRACE, requestAppender\n#log4j.logger.kafka.server.KafkaApis=TRACE, requestAppender\n#log4j.additivity.kafka.server.KafkaApis=false\nlog4j.logger.kafka.request.logger=WARN, requestAppender\nlog4j.additivity.kafka.request.logger=false\n\nlog4j.logger.kafka.controller=TRACE, controllerAppender\nlog4j.additivity.kafka.controller=false\n\nlog4j.logger.kafka.log.LogCleaner=INFO, cleanerAppender\nlog4j.additivity.kafka.log.LogCleaner=false\n\nlog4j.logger.state.change.logger=TRACE, stateChangeAppender\nlog4j.additivity.state.change.logger=false\n\n\nlog4j.logger.kafka.authorizer.logger=INFO, authorizerAppender\nlog4j.additivity.kafka.authorizer.logger=true",
          "kafka_log_maxbackupindex" : "20"
        }
      }
    },
    {
      "ranger-hbase-audit" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "hive-atlas-application.properties" : {
        "properties_attributes" : { },
        "properties" : {
          "atlas.hook.hive.maxThreads" : "5",
          "atlas.hook.hive.plugin.enable" : "false",
          "atlas.hook.hive.keepAliveTime" : "10",
          "atlas.hook.hive.synchronous" : "false",
          "atlas.hook.hive.minThreads" : "5",
          "atlas.hook.hive.numRetries" : "3",
          "atlas.hook.hive.queueSize" : "1000"
        }
      }
    },
    {
      "ranger-kafka-plugin-properties" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "kafka-env" : {
        "properties_attributes" : { },
        "properties" : {
          "service_archive_root_dir" : "{\"DEFAULT\":\"kafka_2.11-0.10.0.0\", \"METRICS_KAFKA_SINK\":\"ambari-metrics-kafka-sink-2.5.1.0.0\"}",
          "kafka_pid_dir" : "/var/run/kafka",
          "kafka_user_nofile_limit" : "128000",
          "service_archive_rela_path" : "{\"DEFAULT\":\"kafka/kafka_2.11-0.10.0.0.tgz\", \"METRICS_KAFKA_SINK\":\"ambari-metrics/ambari-metrics-kafka-sink-2.5.1.0.0.tar.gz\"}",
          "service_version" : "0.10.0",
          "kafka_log_dir" : "/var/log/kafka",
          "kafka_user_nproc_limit" : "65536",
          "content" : "\n#!/bin/bash\n\n# Set KAFKA specific environment variables here.\n\n# The java implementation to use.\nexport JAVA_HOME={{java64_home}}\nexport PATH=$PATH:$JAVA_HOME/bin\nexport PID_DIR={{kafka_pid_dir}}\nexport LOG_DIR={{kafka_log_dir}}\n# Add kafka sink to classpath and related depenencies\nif [ -e \"{{ams_kafka_sink_jar}}\" ]; then\nexport CLASSPATH=$CLASSPATH:{{ams_kafka_sink_jar}}\nexport CLASSPATH=$CLASSPATH:{{ams_kafka_sink_home_dir}}/lib/*\nfi\nif [ -f /etc/kafka/conf/kafka-ranger-env.sh ]; then\n. /etc/kafka/conf/kafka-ranger-env.sh\nfi\nif [ -f {{kafka_kerberos_file}} ]; then\nexport KAFKA_OPTS=\"$KAFKA_OPTS {{kafka_kerberos_params}}\"\nelse\nexport KAFKA_OPTS=\"$KAFKA_OPTS {{kafka_client_kerberos_params}}\"\nfi",
          "is_supported_kafka_ranger" : "true",
          "kafka_user" : "kafka",
          "server_role_directory_map" : "{\"KAFKA_BROKER\":\"kafka_broker\",\"KAFKA_CLIENT\":\"kafka_client\", \"METRICS_KAFKA_SINK\":\"ambari_metrics_kafka_sink\"}"
        }
      }
    },
    {
      "ranger-hbase-plugin-properties" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "ranger-hdfs-security" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "ams-grafana-ini" : {
        "properties_attributes" : { },
        "properties" : {
          "protocol" : "http",
          "cert_key" : "/etc/ambari-metrics-grafana/conf/ams-grafana.key",
          "port" : "3000",
          "cert_file" : "/etc/ambari-metrics-grafana/conf/ams-grafana.crt",
          "ca_cert" : "",
          "content" : "\n##################### Grafana Configuration Example #####################\n#\n# Everything has defaults so you only need to uncomment things you want to\n# change\n\n# possible values : production, development\n; app_mode = production\n\n#################################### Paths ####################################\n[paths]\n# Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)\n#\n;data = /var/lib/grafana\ndata = {{ams_grafana_data_dir}}\n#\n# Directory where grafana can store logs\n#\n;logs = /var/log/grafana\nlogs = {{ams_grafana_log_dir}}\n\n\n#################################### Server ####################################\n[server]\n# Protocol (http or https)\n;protocol = http\nprotocol = {{ams_grafana_protocol}}\n# The ip address to bind to, empty will bind to all interfaces\n;http_addr =\n\n# The http port to use\n;http_port = 3000\nhttp_port = {{ams_grafana_port}}\n\n# The public facing domain name used to access grafana from a browser\n;domain = localhost\n\n# Redirect to correct domain if host header does not match domain\n# Prevents DNS rebinding attacks\n;enforce_domain = false\n\n# The full public facing url\n;root_url = %(protocol)s://%(domain)s:%(http_port)s/\n\n# Log web requests\n;router_logging = false\n\n# the path relative working path\n;static_root_path = public\nstatic_root_path = /usr/ndp/current/ambari_metrics_grafana/lib/public\n\n# enable gzip\n;enable_gzip = false\n\n# https certs & key file\n;cert_file =\n;cert_key =\ncert_file = {{ams_grafana_cert_file}}\ncert_key = {{ams_grafana_cert_key}}\n\n#################################### Database ####################################\n[database]\n# Either \"mysql\", \"postgres\" or \"sqlite3\", it's your choice\n;type = sqlite3\n;host = 127.0.0.1:3306\n;name = grafana\n;user = root\n;password =\n\n# For \"postgres\" only, either \"disable\", \"require\" or \"verify-full\"\n;ssl_mode = disable\n\n# For \"sqlite3\" only, path relative to data_path setting\n;path = grafana.db\n\n#################################### Session ####################################\n[session]\n# Either \"memory\", \"file\", \"redis\", \"mysql\", \"postgres\", default is \"file\"\n;provider = file\n\n# Provider config options\n# memory: not have any config yet\n# file: session dir path, is relative to grafana data_path\n# redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=grafana`\n# mysql: go-sql-driver/mysql dsn config string, e.g.`user:password@tcp(127.0.0.1:3306)/database_name`\n# postgres: user=a password=b host=localhost port=5432 dbname=c sslmode=disable\n;provider_config = sessions\n\n# Session cookie name\n;cookie_name = grafana_sess\n\n# If you use session in https only, default is false\n;cookie_secure = false\n\n# Session life time, default is 86400\n;session_life_time = 86400\n\n#################################### Analytics ####################################\n[analytics]\n# Server reporting, sends usage counters to stats.grafana.org every 24 hours.\n# No ip addresses are being tracked, only simple counters to track\n# running instances, dashboard and error counts. It is very helpful to us.\n# Change this option to false to disable reporting.\n;reporting_enabled = true\n\n# Google Analytics universal tracking code, only enabled if you specify an id here\n;google_analytics_ua_id =\n\n#################################### Security ####################################\n[security]\n# default admin user, created on startup\nadmin_user = {{ams_grafana_admin_user}}\n\n# default admin password, can be changed before first start of grafana, or in profile settings\n;admin_password =\n\n# used for signing\n;secret_key = SW2YcwTIb9zpOOhoPsMm\n\n# Auto-login remember days\n;login_remember_days = 7\n;cookie_username = grafana_user\n;cookie_remember_name = grafana_remember\n\n# disable gravatar profile images\n;disable_gravatar = false\n\n# data source proxy whitelist (ip_or_domain:port seperated by spaces)\n;data_source_proxy_whitelist =\n\n#################################### Users ####################################\n[users]\n# disable user signup / registration\n;allow_sign_up = true\n\n# Allow non admin users to create organizations\n;allow_org_create = true\n\n# Set to true to automatically assign new users to the default organization (id 1)\n;auto_assign_org = true\n\n# Default role new users will be automatically assigned (if disabled above is set to true)\n;auto_assign_org_role = Viewer\n\n# Background text for the user field on the login page\n;login_hint = email or username\n\n#################################### Anonymous Auth ##########################\n[auth.anonymous]\n# enable anonymous access\nenabled = true\n\n# specify organization name that should be used for unauthenticated users\norg_name = Main Org.\n\n# specify role for unauthenticated users\n;org_role = Admin\n\n#################################### Github Auth ##########################\n[auth.github]\n;enabled = false\n;allow_sign_up = false\n;client_id = some_id\n;client_secret = some_secret\n;scopes = user:email,read:org\n;auth_url = https://github.com/login/oauth/authorize\n;token_url = https://github.com/login/oauth/access_token\n;api_url = https://api.github.com/user\n;team_ids =\n;allowed_organizations =\n\n#################################### Google Auth ##########################\n[auth.google]\n;enabled = false\n;allow_sign_up = false\n;client_id = some_client_id\n;client_secret = some_client_secret\n;scopes = https://www.googleapis.com/auth/userinfo.profile\nhttps://www.googleapis.com/auth/userinfo.email\n;auth_url = https://accounts.google.com/o/oauth2/auth\n;token_url = https://accounts.google.com/o/oauth2/token\n;api_url = https://www.googleapis.com/oauth2/v1/userinfo\n;allowed_domains =\n\n#################################### Auth Proxy ##########################\n[auth.proxy]\n;enabled = false\n;header_name = X-WEBAUTH-USER\n;header_property = username\n;auto_sign_up = true\n\n#################################### Basic Auth ##########################\n[auth.basic]\n;enabled = true\n\n#################################### Auth LDAP ##########################\n[auth.ldap]\n;enabled = false\n;config_file = /etc/grafana/ldap.toml\n\n#################################### SMTP / Emailing ##########################\n[smtp]\n;enabled = false\n;host = localhost:25\n;user =\n;password =\n;cert_file =\n;key_file =\n;skip_verify = false\n;from_address = admin@grafana.localhost\n\n[emails]\n;welcome_email_on_sign_up = false\n\n#################################### Logging ##########################\n[log]\n# Either \"console\", \"file\", default is \"console\"\n# Use comma to separate multiple modes, e.g. \"console, file\"\n;mode = console, file\n\n# Buffer length of channel, keep it as it is if you don't know what it is.\n;buffer_len = 10000\n\n# Either \"Trace\", \"Debug\", \"Info\", \"Warn\", \"Error\", \"Critical\", default is \"Trace\"\n;level = Info\n\n# For \"console\" mode only\n[log.console]\n;level =\n\n# For \"file\" mode only\n[log.file]\n;level =\n# This enables automated log rotate(switch of following options), default is true\n;log_rotate = true\n\n# Max line number of single file, default is 1000000\n;max_lines = 1000000\n\n# Max size shift of single file, default is 28 means 1 << 28, 256MB\n;max_lines_shift = 28\n\n# Segment log daily, default is true\n;daily_rotate = true\n\n# Expired days of log file(delete after max days), default is 7\n;max_days = 7\n\n#################################### AMPQ Event Publisher ##########################\n[event_publisher]\n;enabled = false\n;rabbitmq_url = amqp://localhost/\n;exchange = grafana_events\n\n;#################################### Dashboard JSON files ##########################\n[dashboards.json]\n;enabled = false\n;path = /var/lib/grafana/dashboards\npath = /usr/ndp/current/ambari_metrics_grafana/lib/public/dashboards"
        }
      }
    },
    {
      "hadoop-env" : {
        "properties_attributes" : { },
        "properties" : {
          "hadoop_heapsize" : "1024",
          "proxyuser_group" : "users",
          "hadoop_root_logger" : "INFO,RFA",
          "hdfs_data_dir" : "/usr/ndp/data/hdfs",
          "dtnode_heapsize" : "1024m",
          "namenode_backup_dir" : "/tmp/upgrades",
          "service_archive_rela_path" : "{\"DEFAULT\":\"hadoop/hadoop-2.7.3-1.2.0.tar.gz\", \"HDFS_RANGER_PLUGIN\":\"ranger/ranger-0.5-mammut414-hdfs-plugin.tar.gz\",\"METRICS_HADOOP_SINK\":\"ambari-metrics/ambari-metrics-hadoop-sink-2.5.1.0.0.tar.gz\"}",
          "service_version" : "2.7.3",
          "hdfs_user" : "hdfs",
          "hadoop_pid_dir_prefix" : "/var/run/hadoop-hdfs",
          "content" : "\n# Set Hadoop-specific environment variables here.\n\n# The only required environment variable is JAVA_HOME.  All others are\n# optional.  When running a distributed configuration it is best to\n# set JAVA_HOME in this file, so that it is correctly defined on\n# remote nodes.\n\n# The java implementation to use.  Required.\nexport JAVA_HOME={{java_home}}\nexport HADOOP_HOME_WARN_SUPPRESS=1\n\n# Hadoop home directory\nexport HADOOP_HOME=${HADOOP_HOME:-{{component_home}}}\n\n# Hadoop Configuration Directory\n#TODO: if env var set that can cause problems\nexport HADOOP_CONF_DIR=${HADOOP_CONF_DIR:-{{component_conf_dir}}}\n\n# The maximum amount of heap to use, in MB. Default is 1000.\nif [[ (\"$SERVICE\" = \"hiveserver2\") || (\"$SERVICE\" = \"metastore\") || ( \"$SERVICE\" = \"cli\") ]]; then\n  if [ \"$HADOOP_HEAPSIZE\" = \"\" ]; then\n    export HADOOP_HEAPSIZE=\"{{hadoop_heapsize}}\"\n  fi\nelse\n  export HADOOP_HEAPSIZE=\"{{hadoop_heapsize}}\"\nfi\n\n{% if component_name == 'hdfs_namenode' %}\nexport HADOOP_NAMENODE_INIT_HEAPSIZE=\"-Xms{{namenode_heapsize}}\"\n\n{% if java_version < 8 %}\nexport HADOOP_NAMENODE_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hadoop_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{namenode_opt_newsize}} -XX:MaxNewSize={{namenode_opt_maxnewsize}} -XX:PermSize={{namenode_opt_permsize}} -XX:MaxPermSize={{namenode_opt_maxpermsize}} -Xloggc:{{hadoop_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly -Xms{{namenode_heapsize}} -Xmx{{namenode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT -Dorg.mortbay.jetty.Request.maxFormContentSize=-1  ${HADOOP_NAMENODE_OPTS}\"\nexport HADOOP_SECONDARYNAMENODE_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hadoop_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{namenode_opt_newsize}} -XX:MaxNewSize={{namenode_opt_maxnewsize}} -XX:PermSize={{namenode_opt_permsize}} -XX:MaxPermSize={{namenode_opt_maxpermsize}} -Xloggc:{{hadoop_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly ${HADOOP_NAMENODE_INIT_HEAPSIZE} -Xmx{{namenode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT ${HADOOP_SECONDARYNAMENODE_OPTS}\"\n\n# The following applies to multiple commands (fs, dfs, fsck, distcp etc)\nexport HADOOP_CLIENT_OPTS=\"-Xmx${HADOOP_HEAPSIZE}m -XX:MaxPermSize=512m $HADOOP_CLIENT_OPTS\"\n{% else %}\nexport HADOOP_NAMENODE_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hadoop_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{namenode_opt_newsize}} -XX:MaxNewSize={{namenode_opt_maxnewsize}} -Xloggc:{{hadoop_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly -Xms{{namenode_heapsize}} -Xmx{{namenode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT -Dorg.mortbay.jetty.Request.maxFormContentSize=-1 ${HADOOP_NAMENODE_OPTS}\"\nexport HADOOP_SECONDARYNAMENODE_OPTS=\"-server -XX:ParallelGCThreads=8 -XX:+UseConcMarkSweepGC -XX:ErrorFile={{hadoop_log_dir_prefix}}/$USER/hs_err_pid%p.log -XX:NewSize={{namenode_opt_newsize}} -XX:MaxNewSize={{namenode_opt_maxnewsize}} -Xloggc:{{hadoop_log_dir_prefix}}/$USER/gc.log-`date +'%Y%m%d%H%M'` -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCMSInitiatingOccupancyOnly ${HADOOP_NAMENODE_INIT_HEAPSIZE} -Xmx{{namenode_heapsize}} -Dhadoop.security.logger=INFO,DRFAS -Dhdfs.audit.logger=INFO,DRFAAUDIT ${HADOOP_SECONDARYNAMENODE_OPTS}\"\n\n# The following applies to multiple commands (fs, dfs, fsck, distcp etc)\nexport HADOOP_CLIENT_OPTS=\"-Xmx${HADOOP_HEAPSIZE}m $HADOOP_CLIENT_OPTS\"\n{% endif %}\n{% endif %}\n\n{% if component_name == 'hdfs_datanode' %}\n# Path to jsvc required by secure datanode\nexport JSVC_HOME={{jsvc_path}}\n\nHADOOP_DATANODE_OPTS=\"-Xmx{{dtnode_heapsize}} -Dhadoop.security.logger=ERROR,DRFAS ${HADOOP_DATANODE_OPTS}\"\n\n# On secure datanodes, user to run the datanode as after dropping privileges\nexport HADOOP_SECURE_DN_USER=${HADOOP_SECURE_DN_USER:-{{hadoop_secure_dn_user}}}\n\n# Where log files are stored in the secure data environment.\nexport HADOOP_SECURE_DN_LOG_DIR={{hadoop_log_dir_prefix}}/$HADOOP_SECURE_DN_USER\nexport HADOOP_SECURE_DN_PID_DIR={{hadoop_pid_dir_prefix}}/$HADOOP_SECURE_DN_USER\n\n{% if is_datanode_max_locked_memory_set %}\n# Fix temporary bug, when ulimit from conf files is not picked up, without full relogin.\n# Makes sense to fix only when runing DN as root\nif [ \"$command\" == \"datanode\" ] && [ \"$EUID\" -eq 0 ] && [ -n \"$HADOOP_SECURE_DN_USER\" ]; then\nulimit -l {{datanode_max_locked_memory}}\nfi\n{% endif %}\n{% endif %}\n\n{% if component_name == 'hdfs_client' %}\n{% if java_version < 8 %}\n# The following applies to multiple commands (fs, dfs, fsck, distcp etc)\nexport HADOOP_CLIENT_OPTS=\"-Xmx${HADOOP_HEAPSIZE}m -XX:MaxPermSize=512m $HADOOP_CLIENT_OPTS\"\n{% else %}\n# The following applies to multiple commands (fs, dfs, fsck, distcp etc)\nexport HADOOP_CLIENT_OPTS=\"-Xmx${HADOOP_HEAPSIZE}m $HADOOP_CLIENT_OPTS\"\n{% endif %}\n{% endif %}\n\n# Extra Java runtime options.  Empty by default.\nexport HADOOP_OPTS=\"-Djava.net.preferIPv4Stack=true ${HADOOP_OPTS}\"\n\n# Command specific options appended to HADOOP_OPTS when specified\nHADOOP_BALANCER_OPTS=\"-server -Xmx{{hadoop_heapsize}}m ${HADOOP_BALANCER_OPTS}\"\n\n# Extra ssh options.  Empty by default.\nexport HADOOP_SSH_OPTS=\"-o ConnectTimeout=5 -o SendEnv=HADOOP_CONF_DIR\"\n\nexport HADOOP_ROOT_LOGGER={{hadoop_root_logger}}\n\n# Where log files are stored.  $HADOOP_HOME/logs by default.\nexport HADOOP_LOG_DIR={{hadoop_log_dir}}\n\n# File naming remote slave hosts.  $HADOOP_HOME/conf/slaves by default.\n# export HADOOP_SLAVES=${HADOOP_HOME}/conf/slaves\n\n# host:path where hadoop code should be rsync'd from.  Unset by default.\n# export HADOOP_MASTER=master:/home/$USER/src/hadoop\n\n# Seconds to sleep between slave commands.  Unset by default.  This\n# can be useful in large clusters, where, e.g., slave rsyncs can\n# otherwise arrive faster than the master can service them.\n# export HADOOP_SLAVE_SLEEP=0.1\n\n# The directory where pid files are stored. /tmp by default.\nexport HADOOP_PID_DIR={{hadoop_pid_dir_prefix}}/$USER\n\n# A string representing this instance of hadoop. $USER by default.\nexport HADOOP_IDENT_STRING=$USER\n\n# The scheduling priority for daemon processes.  See 'man nice'.\n\n# export HADOOP_NICENESS=10\n\n# Add database libraries\nJAVA_JDBC_LIBS=\"\"\nif [ -d \"/usr/share/java\" ]; then\n  for jarFile in `ls /usr/share/java | grep -E \"(mysql|ojdbc|postgresql|sqljdbc)\" 2>/dev/null`\n  do\n    JAVA_JDBC_LIBS=${JAVA_JDBC_LIBS}:$jarFile\n  done\nfi\n\n# Add libraries to the hadoop classpath - some may not need a colon as they already include it\nexport HADOOP_CLASSPATH=${HADOOP_CLASSPATH}${JAVA_JDBC_LIBS}\n\nif [ -d \"/usr/lib/tez\" ]; then\n  export HADOOP_CLASSPATH=$HADOOP_CLASSPATH:/usr/lib/tez/*:/usr/lib/tez/lib/*:/etc/tez/conf\nfi\n\n# Setting path to hdfs command line\nexport HADOOP_LIBEXEC_DIR={{component_libexec_dir}}",
          "hdfs_log_dir_prefix" : "/var/log/hadoop-hdfs",
          "namenode_opt_newsize" : "128m",
          "namenode_heapsize" : "1024m",
          "hdfs_tmp_dir" : "/tmp",
          "namenode_opt_maxpermsize" : "256m",
          "service_archive_root_dir" : "{\"DEFAULT\":\"hadoop-2.7.3\", \"HDFS_RANGER_PLUGIN\":\"ranger-0.5-mammut414-hdfs-plugin\",\"METRICS_HADOOP_SINK\":\"ambari-metrics-hadoop-sink-2.5.1.0.0\"}",
          "hdfs_user_nofile_limit" : "128000",
          "hdfs_user_nproc_limit" : "65536",
          "namenode_status_check_retry_times" : "5",
          "server_role_directory_map" : "{\"HDFS_CLIENT\":\"hdfs_client\",\"NAMENODE\":\"hdfs_namenode\",\"DATANODE\":\"hdfs_datanode\",\"SECONDARY_NAMENODE\":\"hdfs_secondary_namenode\",\"JOURNALNODE\":\"hdfs_journalnode\",\"ZKFC\":\"hdfs_zkfc\",\"NFS_GATEWAY\":\"hdfs_nfs_gateway\",\"HDFS_RANGER_PLUGIN\":\"hdfs_ranger_plugin\",\"METRICS_HADOOP_SINK\":\"ambari_metrics_hadoop_sink\"}",
          "namenode_opt_maxnewsize" : "128m",
          "namenode_opt_permsize" : "128m"
        }
      }
    },
    {
      "ranger-spark2-security" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "kafka-logsearch-conf" : {
        "properties_attributes" : { },
        "properties" : {
          "component_mappings" : "KAFKA_BROKER:kafka_server,kafka_request,kafka_logcleaner,kafka_controller,kafka_statechange",
          "content" : "\n{\n  \"input\":[\n    {\n      \"type\":\"kafka_controller\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/kafka-env/kafka_log_dir', '/var/log/kafka')}}/controller.log\"\n    },\n    {\n      \"type\":\"kafka_request\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/kafka-env/kafka_log_dir', '/var/log/kafka')}}/kafka-request.log\"\n    },\n    {\n      \"type\":\"kafka_logcleaner\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/kafka-env/kafka_log_dir', '/var/log/kafka')}}/log-cleaner.log\"\n    },\n    {\n      \"type\":\"kafka_server\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{default('/configurations/kafka-env/kafka_log_dir', '/var/log/kafka')}}/server.log\"\n    },\n    {\n      \"type\":\"kafka_statechange\",\n      \"rowtype\":\"service\",\n      \"path\":\"{{kafka_log_dir}}/state-change.log\"\n    }\n   ],\n  \"filter\":[\n    {\n      \"filter\":\"grok\",\n      \"conditions\":{\n        \"fields\":{\n          \"type\":[\n            \"kafka_controller\",\n            \"kafka_request\",\n            \"kafka_logcleaner\"\n          ]\n         }\n       },\n      \"log4j_format\":\"[%d] %p %m (%c)%n\",\n      \"multiline_pattern\":\"^(\\\\[%{TIMESTAMP_ISO8601:logtime}\\\\])\",\n      \"message_pattern\":\"(?m)^\\\\[%{TIMESTAMP_ISO8601:logtime}\\\\]%{SPACE}%{LOGLEVEL:level}%{SPACE}\\\\[%{DATA:thread_name}\\\\]%{SPACE}%{GREEDYDATA:log_message}\",\n      \"post_map_values\":{\n        \"logtime\":{\n          \"map_date\":{\n            \"target_date_pattern\":\"yyyy-MM-dd HH:mm:ss,SSS\"\n          }\n         }\n       }\n     },\n    {\n      \"filter\":\"grok\",\n      \"comment\":\"Suppose to be same log4j pattern as other kafka processes, but some reason thread is not printed\",\n      \"conditions\":{\n        \"fields\":{\n          \"type\":[\n            \"kafka_server\",\n            \"kafka_statechange\"\n          ]\n         }\n       },\n      \"log4j_format\":\"[%d] %p %m (%c)%n\",\n      \"multiline_pattern\":\"^(\\\\[%{TIMESTAMP_ISO8601:logtime}\\\\])\",\n      \"message_pattern\":\"(?m)^\\\\[%{TIMESTAMP_ISO8601:logtime}\\\\]%{SPACE}%{LOGLEVEL:level}%{SPACE}%{GREEDYDATA:log_message}\",\n      \"post_map_values\":{\n        \"logtime\":{\n          \"map_date\":{\n            \"target_date_pattern\":\"yyyy-MM-dd HH:mm:ss,SSS\"\n          }\n         }\n       }\n     }\n   ]\n }",
          "service_name" : "Kafka"
        }
      }
    },
    {
      "zookeeper-env" : {
        "properties_attributes" : { },
        "properties" : {
          "service_archive_root_dir" : "{\"DEFAULT\":\"zookeeper-3.4.6\"}",
          "zk_pid_dir" : "/var/run/zookeeper",
          "zk_log_dir" : "/var/log/zookeeper",
          "zk_user" : "zookeeper",
          "service_archive_rela_path" : "{\"DEFAULT\":\"zookeeper/zookeeper-3.4.6.tar.gz\"}",
          "service_version" : "3.4.6",
          "content" : "\nexport JAVA_HOME={{java64_home}}\nexport ZOOKEEPER_HOME={{zk_home}}\nexport ZOO_LOG_DIR={{zk_log_dir}}\nexport ZOOPIDFILE={{zk_pid_file}}\nexport SERVER_JVMFLAGS={{zk_server_heapsize}}\nexport JAVA=$JAVA_HOME/bin/java\nexport CLASSPATH=$CLASSPATH\n\n{% if security_enabled %}\nexport SERVER_JVMFLAGS=\"$SERVER_JVMFLAGS -Djava.security.auth.login.config={{zk_server_jaas_file}}\"\nexport CLIENT_JVMFLAGS=\"$CLIENT_JVMFLAGS -Djava.security.auth.login.config={{zk_client_jaas_file}}\"\n{% endif %}",
          "server_role_directory_map" : "{\"ZOOKEEPER_CLIENT\":\"zookeeper_client\",\"ZOOKEEPER_SERVER\":\"zookeeper_server\"}"
        }
      }
    },
    {
      "yarn-log4j" : {
        "properties_attributes" : { },
        "properties" : {
          "content" : "\n#Relative to Yarn Log Dir Prefix\nyarn.log.dir=.\n#\n# Job Summary Appender\n#\n# Use following logger to send summary to separate file defined by\n# hadoop.mapreduce.jobsummary.log.file rolled daily:\n# hadoop.mapreduce.jobsummary.logger=INFO,JSA\n#\nhadoop.mapreduce.jobsummary.logger=${hadoop.root.logger}\nhadoop.mapreduce.jobsummary.log.file=hadoop-mapreduce.jobsummary.log\nlog4j.appender.JSA=org.apache.log4j.DailyRollingFileAppender\n# Set the ResourceManager summary log filename\nyarn.server.resourcemanager.appsummary.log.file=hadoop-mapreduce.jobsummary.log\n# Set the ResourceManager summary log level and appender\nyarn.server.resourcemanager.appsummary.logger=${hadoop.root.logger}\n#yarn.server.resourcemanager.appsummary.logger=INFO,RMSUMMARY\n\n# To enable AppSummaryLogging for the RM,\n# set yarn.server.resourcemanager.appsummary.logger to\n# LEVEL,RMSUMMARY in hadoop-env.sh\n\n# Appender for ResourceManager Application Summary Log\n# Requires the following properties to be set\n#    - hadoop.log.dir (Hadoop Log directory)\n#    - yarn.server.resourcemanager.appsummary.log.file (resource manager app summary log filename)\n#    - yarn.server.resourcemanager.appsummary.logger (resource manager app summary log level and appender)\nlog4j.appender.RMSUMMARY=org.apache.log4j.RollingFileAppender\nlog4j.appender.RMSUMMARY.File=${yarn.log.dir}/${yarn.server.resourcemanager.appsummary.log.file}\nlog4j.appender.RMSUMMARY.MaxFileSize=256MB\nlog4j.appender.RMSUMMARY.MaxBackupIndex=20\nlog4j.appender.RMSUMMARY.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RMSUMMARY.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.JSA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.JSA.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{2}: %m%n\nlog4j.appender.JSA.DatePattern=.yyyy-MM-dd\nlog4j.appender.JSA.layout=org.apache.log4j.PatternLayout\nlog4j.logger.org.apache.hadoop.yarn.server.resourcemanager.RMAppManager$ApplicationSummary=${yarn.server.resourcemanager.appsummary.logger}\nlog4j.additivity.org.apache.hadoop.yarn.server.resourcemanager.RMAppManager$ApplicationSummary=false\n\n# Appender for viewing information for errors and warnings\nyarn.ewma.cleanupInterval=300\nyarn.ewma.messageAgeLimitSeconds=86400\nyarn.ewma.maxUniqueMessages=250\nlog4j.appender.EWMA=org.apache.hadoop.yarn.util.Log4jWarningErrorMetricsAppender\nlog4j.appender.EWMA.cleanupInterval=${yarn.ewma.cleanupInterval}\nlog4j.appender.EWMA.messageAgeLimitSeconds=${yarn.ewma.messageAgeLimitSeconds}\nlog4j.appender.EWMA.maxUniqueMessages=${yarn.ewma.maxUniqueMessages}\n\n# Audit logging for ResourceManager\nrm.audit.logger=${hadoop.root.logger}\nlog4j.logger.org.apache.hadoop.yarn.server.resourcemanager.RMAuditLogger=${rm.audit.logger}\nlog4j.additivity.org.apache.hadoop.yarn.server.resourcemanager.RMAuditLogger=false\nlog4j.appender.RMAUDIT=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.RMAUDIT.File=${yarn.log.dir}/rm-audit.log\nlog4j.appender.RMAUDIT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RMAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.RMAUDIT.DatePattern=.yyyy-MM-dd\n\n# Audit logging for NodeManager\nnm.audit.logger=${hadoop.root.logger}\nlog4j.logger.org.apache.hadoop.yarn.server.nodemanager.NMAuditLogger=${nm.audit.logger}\nlog4j.additivity.org.apache.hadoop.yarn.server.nodemanager.NMAuditLogger=false\nlog4j.appender.NMAUDIT=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.NMAUDIT.File=${yarn.log.dir}/nm-audit.log\nlog4j.appender.NMAUDIT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.NMAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.NMAUDIT.DatePattern=.yyyy-MM-dd"
        }
      }
    },
    {
      "mapred-env" : {
        "properties_attributes" : { },
        "properties" : {
          "mapred_user_nofile_limit" : "32768",
          "mapred_user" : "mapred",
          "mapred_user_nproc_limit" : "65536",
          "service_archive_rela_path" : "{\"DEFAULT\":\"hadoop/hadoop-2.7.3-1.2.0.tar.gz\"}",
          "mapred_root_logger" : "INFO,RFA",
          "service_version" : "2.7.3",
          "mapred_log_dir_prefix" : "/var/log/hadoop-mapreduce",
          "content" : "\nexport JAVA_HOME={{java_home}}\nexport HADOOP_MAPRED_HOME={{component_home}}\n\nexport HADOOP_JOB_HISTORYSERVER_HEAPSIZE={{jobhistory_heapsize}}\n#export HADOOP_JOB_HISTORYSERVER_OPTS=\n\nexport HADOOP_MAPRED_LOG_DIR={{mapred_log_dir}}\nexport HADOOP_MAPRED_ROOT_LOGGER={{mapred_root_logger}}\n#export HADOOP_JHS_LOGGER=INFO,RFA # Hadoop JobSummary logger.\n\nexport HADOOP_MAPRED_PID_DIR={{mapred_pid_dir}}\nexport HADOOP_MAPRED_IDENT_STRING=$USER #A string representing this instance of hadoop. $USER by default\n#export HADOOP_MAPRED_NICENESS= #The scheduling priority for daemons. Defaults to 0.",
          "jobhistory_heapsize" : "900",
          "service_archive_root_dir" : "{\"DEFAULT\":\"hadoop-2.7.3\"}",
          "mapred_pid_dir_prefix" : "/var/run/hadoop-mapreduce",
          "server_role_directory_map" : "{\"MAPREDUCE2_CLIENT\":\"mapreduce_client\",\"HISTORYSERVER\":\"mapreduce_historyserver\"}"
        }
      }
    },
    {
      "ranger-kafka-security" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "cluster-env" : {
        "properties_attributes" : { },
        "properties" : {
          "create_group_min_gid" : "1000",
          "recovery_max_count" : "6",
          "manage_dirs_on_root" : "true",
          "managed_hdfs_resource_property_names" : "",
          "recovery_retry_interval" : "5",
          "stack_features" : "{\n  \"stack_features\": [\n    {\n      \"name\": \"rolling_upgrade\",\n      \"description\": \"Rolling upgrade support\",\n      \"min_version\": \"0.1.0.0\"\n    },\n    {\n      \"name\": \"config_versioning\",\n      \"description\": \"Configurable versions support\",\n      \"min_version\": \"0.1.0.0\"\n    },\n    {\n      \"name\": \"snappy\",\n      \"description\": \"Snappy compressor/decompressor support\",\n      \"min_version\": \"0.1.0.0\"\n    },\n    {\n      \"name\": \"ranger_kerberos_support\",\n      \"description\": \"Ranger Kerberos support\",\n      \"min_version\": \"0.1.0.0\"\n    },\n    {\n      \"name\": \"ranger_audit_db_support\",\n      \"description\": \"Ranger Audit to DB support\",\n      \"min_version\": \"0.1.0.0\"\n    },\n    {\n      \"name\": \"kafka_kerberos\",\n      \"description\": \"Kafka Kerberos support\",\n      \"min_version\": \"0.1.0.0\"\n    },\n    {\n      \"name\": \"atlas_hdfs_site_on_namenode_ha\",\n      \"description\": \"Atlas on namenode ha mode\",\n      \"min_version\": \"0.1.0.0\"\n    }\n  ]\n}",
          "stack_tools" : "{\n  \"stack_selector\": [\"hdp-select\", \"/usr/bin/hdp-select\", \"hdp-select\"],\n  \"conf_selector\": [\"conf-select\", \"/usr/bin/conf-select\", \"conf-select\"]\n}",
          "repo_ubuntu_template" : "{{package_type}} {{base_url}} {{components}}",
          "stack_root" : "/usr/ndp",
          "fetch_nonlocal_groups" : "true",
          "one_dir_per_partition" : "false",
          "create_user_min_uid" : "5000",
          "kerberos_domain" : "EXAMPLE.COM",
          "ignore_bad_mounts" : "false",
          "user_group" : "hadoop",
          "override_uid" : "true",
          "security_enabled" : "false",
          "recovery_lifetime_max_count" : "1024",
          "archives_root_urls" : "http://hzayq-bigdata-bdms1.server.163.org:8081/release_packages/debian8/",
          "recovery_type" : "AUTO_START",
          "repo_suse_rhel_template" : "[{{repo_id}}]\nname={{repo_id}}\n{% if mirror_list %}mirrorlist={{mirror_list}}{% else %}baseurl={{base_url}}{% endif %}\n\npath=/\nenabled=1\ngpgcheck=0",
          "recovery_enabled" : "true",
          "smokeuser" : "ambari-qa",
          "smokeuser_keytab" : "/etc/security/keytabs/smokeuser.headless.keytab",
          "reinstall_component_package" : "false",
          "alerts_repeat_tolerance" : "1",
          "recovery_window_in_minutes" : "60",
          "ignore_groupsusers_create" : "false"
        }
      }
    },
    {
      "hive-env" : {
        "properties_attributes" : { },
        "properties" : {
          "hive_database" : "Existing MySQL / MariaDB Database",
          "hive_log_dir" : "/var/log/hive",
          "hive_user" : "hive",
          "hive_security_authorization" : "None",
          "hive_user_nproc_limit" : "16000",
          "service_archive_rela_path" : "{\"DEFAULT\":\"hive/apache-hive-2.1.1-bin.tar.gz\", \"HIVE_SERVER2_RANGER_PLUGIN\":\"ranger/ranger-0.5-mammut414-hive-plugin.tar.gz\", \"HIVE_METASTORE_RANGER_PLUGIN\":\"ranger/ranger-0.5-mammut414-hive-plugin.tar.gz\", \"HIVE_CLIENT_RANGER_PLUGIN\":\"ranger/ranger-0.5-mammut414-hive-plugin.tar.gz\", \"ATLAS_HOOK_PLUGIN\":\"atlas/apache-atlas-apache-atlas-0.8.1-0.1.1-bin.tar.gz\", \"METRICS_HADOOP_SINK\":\"ambari-metrics/ambari-metrics-hadoop-sink-2.5.1.0.0.tar.gz\"}",
          "service_version" : "2.1.1",
          "hive.metastore.heapsize" : "4029",
          "content" : "\n if [ \"$SERVICE\" = \"cli\" ]; then\n   if [ -z \"$DEBUG\" ]; then\n     export HADOOP_OPTS=\"$HADOOP_OPTS -XX:NewRatio=12 -XX:MaxHeapFreeRatio=40 -XX:MinHeapFreeRatio=15 -XX:+UseParNewGC -XX:-UseGCOverheadLimit\"\n   else\n     export HADOOP_OPTS=\"$HADOOP_OPTS -XX:NewRatio=12 -XX:MaxHeapFreeRatio=40 -XX:MinHeapFreeRatio=15 -XX:-UseGCOverheadLimit\"\n   fi\n fi\n\n# The heap size of the jvm stared by hive shell script can be controlled via:\n\nif [ \"$SERVICE\" = \"metastore\" ]; then\n  export HADOOP_HEAPSIZE={{hive_metastore_heapsize}} # Setting for HiveMetastore\nelse\n  export HADOOP_HEAPSIZE={{hive_heapsize}} # Setting for HiveServer2 and Client\nfi\n\nexport HADOOP_NEW_HEAPSIZE=$[ $HADOOP_HEAPSIZE / 4 ]\n\n# heapsize great then 10GB, permsize set to 256;\nif [ $HADOOP_HEAPSIZE -gt 10240 ] ; then\n  PERM_SIZE=256\nelif [ $HADOOP_HEAPSIZE -gt 4096 ] ; then\n  PERM_SIZE=128\nelse\n  PERM_SIZE=96\nfi\n\nexport HADOOP_CLIENT_OPTS=\"$HADOOP_CLIENT_OPTS -Dhive.log.dir={{hive_log_dir}} -Dhive.log.file=hive-$USER-$SERVICE.log\"\nif [ \"$SERVICE\" = \"metastore\" -o \"$SERVICE\" = \"hiveserver2\" ]; then\n  {% if java_version < 8 %}\n  export HADOOP_CLIENT_OPTS=\"$HADOOP_CLIENT_OPTS -Xms${HADOOP_HEAPSIZE}m -Xmx${HADOOP_HEAPSIZE}m -Xmn${HADOOP_NEW_HEAPSIZE}m -XX:PermSize=${PERM_SIZE}m -XX:+UseConcMarkSweepGC -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -Xloggc:{{hive_log_dir}}/gc-$SERVICE.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=2 -XX:GCLogFileSize=256M\"\n  {% else %}\n  export HADOOP_CLIENT_OPTS=\"$HADOOP_CLIENT_OPTS -Xms${HADOOP_HEAPSIZE}m -Xmx${HADOOP_HEAPSIZE}m -Xmn${HADOOP_NEW_HEAPSIZE}m -XX:+UseConcMarkSweepGC -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -Xloggc:{{hive_log_dir}}/gc-$SERVICE.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=2 -XX:GCLogFileSize=256M\"\n  {% endif %}\nelse\n  {% if java_version < 8 %}\n  export HADOOP_CLIENT_OPTS=\"$HADOOP_CLIENT_OPTS -Xms${HADOOP_HEAPSIZE}m -Xmx${HADOOP_HEAPSIZE}m -Xmn${HADOOP_NEW_HEAPSIZE}m -XX:PermSize=${PERM_SIZE}m -XX:+UseConcMarkSweepGC\"\n  {% else %}\n  export HADOOP_CLIENT_OPTS=\"$HADOOP_CLIENT_OPTS -Xms${HADOOP_HEAPSIZE}m -Xmx${HADOOP_HEAPSIZE}m -Xmn${HADOOP_NEW_HEAPSIZE}m -XX:+UseConcMarkSweepGC\"\n  {% endif %}\nfi\n\n# Larger heap size may be required when running queries over large number of files or partitions.\n# By default hive shell scripts use a heap size of 256 (MB).  Larger heap size would also be\n# appropriate for hive server (hwi etc).\n\n\n# Set HADOOP_HOME to point to a specific hadoop install directory\nHADOOP_HOME=${HADOOP_HOME:-{{hadoop_home}}}\n\n# Hive Configuration Directory can be controlled by:\nexport HIVE_CONF_DIR={{hive_config_dir}}\n\n# Folder containing extra ibraries required for hive compilation/execution can be controlled by:\nif [ \"$SERVICE\" = \"hiveserver2\" ]; then\n  export HIVE_AUX_JARS_PATH={{hive_home_dir}}/auxlib\n{% if is_hive_client and has_azkaban_exec_local_host %}\nelif [ \"$SERVICE\" = \"cli\" ]; then\n  export HIVE_AUX_JARS_PATH={{azkaban_lib_dir}}/atlas_lib/hive\n{% endif %}\n  # Set atlas hook jar\n  if [ -e {{atlas_hive_hook_dir}} ]; then\n    export HIVE_AUX_JARS_PATH=$HIVE_AUX_JARS_PATH:{{atlas_hive_hook_dir}}\n  fi\nfi\n\nexport METASTORE_PORT={{hive_metastore_port}}",
          "hive_data_dir" : "/usr/ndp/data/hive",
          "hive.client.heapsize" : "1024",
          "service_archive_root_dir" : "{\"DEFAULT\":\"apache-hive-2.1.1-bin\", \"HIVE_SERVER2_RANGER_PLUGIN\":\"ranger-0.5-mammut414-hive-plugin\", \"HIVE_METASTORE_RANGER_PLUGIN\":\"ranger-0.5-mammut414-hive-plugin\", \"HIVE_CLIENT_RANGER_PLUGIN\":\"ranger-0.5-mammut414-hive-plugin\", \"ATLAS_HOOK_PLUGIN\":\"apache-atlas-apache-atlas-0.8.1-0.1.1\", \"METRICS_HADOOP_SINK\":\"ambari-metrics-hadoop-sink-2.5.1.0.0\"}",
          "hive.heapsize" : "12089",
          "hive_database_name" : "hive",
          "hive_database_type" : "mysql",
          "hive_user_nofile_limit" : "32000",
          "hive_pid_dir" : "/var/run/hive",
          "hive_ambari_database" : "MySQL",
          "server_role_directory_map" : "{\"HIVE_METASTORE\":\"hive_metastore\",\"HIVE_SERVER\":\"hive_server2\",\"HIVE_CLIENT\":\"hive_client\",\"HIVE_CLIENT_RANGER_PLUGIN\":\"hive_client_ranger_plugin\", \"HIVE_SERVER2_RANGER_PLUGIN\":\"hive_server2_ranger_plugin\", \"HIVE_METASTORE_RANGER_PLUGIN\":\"hive_metastore_ranger_plugin\", \"ATLAS_HOOK_PLUGIN\":\"atlas_hook_plugin\", \"METRICS_HADOOP_SINK\":\"ambari_metrics_hadoop_sink\"}"
        }
      }
    },
    {
      "ams-grafana-env" : {
        "properties_attributes" : { },
        "properties" : {
          "metrics_grafana_log_dir" : "/var/log/ambari-metrics-grafana",
          "metrics_grafana_pid_dir" : "/var/run/ambari-metrics-grafana",
          "content" : "\n# Set environment variables here.\n\n# AMS UI Server Home Dir\nexport AMS_GRAFANA_HOME_DIR={{ams_grafana_home_dir}}/lib\n\n# AMS UI Server Data Dir\nexport AMS_GRAFANA_DATA_DIR={{ams_grafana_data_dir}}\n\n# AMS UI Server Log Dir\nexport AMS_GRAFANA_LOG_DIR={{ams_grafana_log_dir}}\n\n# AMS UI Server PID Dir\nexport AMS_GRAFANA_PID_DIR={{ams_grafana_pid_dir}}",
          "metrics_grafana_data_dir" : "/var/lib/ambari-metrics-grafana",
          "metrics_grafana_username" : "admin"
        }
      }
    },
    {
      "ranger-hive-audit" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    },
    {
      "hbase-atlas-application.properties" : {
        "properties_attributes" : { },
        "properties" : {
          "atlas.hook.hbase.plugin.enable" : "false"
        }
      }
    },
    {
      "ranger-hive-security" : {
        "properties_attributes" : { },
        "properties" : { }
      }
    }
  ],
  "host_groups" : [
    {
      "components" : [
        {
          "name" : "YARN_CLIENT"
        },
        {
          "name" : "KAFKA_CLIENT"
        },
        {
          "name" : "HIVE_SERVER"
        },
        {
          "name" : "SPARK2_CLIENT"
        },
        {
          "name" : "HISTORYSERVER"
        },
        {
          "name" : "METRICS_MONITOR"
        },
        {
          "name" : "HIVE_METASTORE"
        },
        {
          "name" : "ZOOKEEPER_CLIENT"
        },
        {
          "name" : "SECONDARY_NAMENODE"
        },
        {
          "name" : "MAPREDUCE2_CLIENT"
        },
        {
          "name" : "ZOOKEEPER_SERVER"
        },
        {
          "name" : "HIVE_CLIENT"
        },
        {
          "name" : "RESOURCEMANAGER"
        }
      ],
      "configurations" : [ ],
      "name" : "host_group_2",
      "cardinality" : "1"
    },
    {
      "components" : [
        {
          "name" : "MAPREDUCE2_CLIENT"
        },
        {
          "name" : "KAFKA_CLIENT"
        },
        {
          "name" : "ZOOKEEPER_SERVER"
        },
        {
          "name" : "AMBARI_SERVER"
        },
        {
          "name" : "SPARK2_CLIENT"
        },
        {
          "name" : "METRICS_MONITOR"
        },
        {
          "name" : "HBASE_MASTER"
        },
        {
          "name" : "ZOOKEEPER_CLIENT"
        },
        {
          "name" : "METRICS_GRAFANA"
        }
      ],
      "configurations" : [ ],
      "name" : "host_group_1",
      "cardinality" : "1"
    },
    {
      "components" : [
        {
          "name" : "NODEMANAGER"
        },
        {
          "name" : "YARN_CLIENT"
        },
        {
          "name" : "HDFS_CLIENT"
        },
        {
          "name" : "KAFKA_CLIENT"
        },
        {
          "name" : "SPARK2_CLIENT"
        },
        {
          "name" : "SPARK2_THRIFTSERVER"
        },
        {
          "name" : "METRICS_MONITOR"
        },
        {
          "name" : "NAMENODE"
        },
        {
          "name" : "ZOOKEEPER_CLIENT"
        },
        {
          "name" : "SPARK2_JOBHISTORYSERVER"
        },
        {
          "name" : "KAFKA_BROKER"
        },
        {
          "name" : "MAPREDUCE2_CLIENT"
        },
        {
          "name" : "ZOOKEEPER_SERVER"
        },
        {
          "name" : "HBASE_REGIONSERVER"
        },
        {
          "name" : "DATANODE"
        },
        {
          "name" : "HBASE_CLIENT"
        },
        {
          "name" : "HIVE_CLIENT"
        },
        {
          "name" : "METRICS_COLLECTOR"
        },
        {
          "name" : "PHOENIX_QUERY_SERVER"
        }
      ],
      "configurations" : [ ],
      "name" : "host_group_3",
      "cardinality" : "1"
    }
  ],
  "settings" : [
    {
      "recovery_settings" : [
        {
          "recovery_enabled" : "true"
        }
      ]
    },
    {
      "service_settings" : [
        {
          "recovery_enabled" : "true",
          "name" : "AMBARI_METRICS"
        }
      ]
    },
    {
      "component_settings" : [
        {
          "recovery_enabled" : "true",
          "name" : "METRICS_COLLECTOR"
        }
      ]
    }
  ],
  "Blueprints" : {
    "stack_name" : "NDP",
    "stack_version" : "3.2.0"
  }
}